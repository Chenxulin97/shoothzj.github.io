<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java DefaultUncaughtExceptionHandler 详解</title>
    <url>/java-default-uncaught-exception-handler/</url>
    <content><![CDATA[<p>在Java程序运行时，一些非受检异常可能会导致程序崩溃，比如NullPointerException、ArrayIndexOutOfBoundsException等等，这些异常都是由JVM抛出的，如果不对这些异常进行处理，小则线程运行中突然退出，大则整个程序崩溃。理想的场景下，每一个非受检异常都应该被捕获并进行处理，但是在实际开发中，我们往往会忽略一些异常，这些异常可能是由于程序员的疏忽导致的，也可能是由于程序员无法预知的原因导致的，比如第三方库抛出的异常。</p>
<p>为了避免这些异常导致程序崩溃，Java提供了一个全局的异常处理器，即DefaultUncaughtExceptionHandler，它可以捕获所有未被捕获的异常，从而避免程序崩溃。</p>
<p>DefaultUncaught的使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UncaughtExceptionHandle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler((t, e) -&gt; log.error(<span class="string">&quot;Uncaught exception: &quot;</span>, e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述的代码会将未捕获的异常打印到日志中，如果你希望打印至标准输出或标准输出，可以将log替换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准输出</span></span><br><span class="line">System.out.println(<span class="string">&quot;Uncaught exception: &quot;</span> + e);</span><br><span class="line"><span class="comment">// 错误输出</span></span><br><span class="line">System.err.println(<span class="string">&quot;Uncaught exception: &quot;</span> + e);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>jetty servlet的编码字符集选择</title>
    <url>/java-servlet-encoding-charset/</url>
    <content><![CDATA[<p>记一次中文指标乱码问题，问题也很简单，如下图所示：</p>
<p><img src="/images/20230603/p1.png" alt="Untitled"></p>
<p>从metricbeat开始找原因，发现其实只要是UTF-8的编码格式就都可以解析，最终发现是webServer返回的数据非UTF-8格式，修改方案也很简单。将servlet中的content-type里面的<strong>text&#x2F;plain</strong>修改成<strong>text&#x2F;plain; charset&#x3D;utf-8</strong>就可以了，如下面代码所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">    response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;&lt;h1&gt;哈哈&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以轻易使用一个demo来复现这个问题，在maven中添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.35.v20201120<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.35.v20201120<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoothzj.jetty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.servlet.ServletContextHandler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.servlet.ServletHolder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleJettyServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletContextHandler</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextHandler</span>(ServletContextHandler.SESSIONS);</span><br><span class="line">        context.setContextPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        server.setHandler(context);</span><br><span class="line"></span><br><span class="line">        context.addServlet(<span class="keyword">new</span> <span class="title class_">ServletHolder</span>(<span class="keyword">new</span> <span class="title class_">HelloDefaultServlet</span>()), <span class="string">&quot;/hello-default&quot;</span>);</span><br><span class="line">        context.addServlet(<span class="keyword">new</span> <span class="title class_">ServletHolder</span>(<span class="keyword">new</span> <span class="title class_">HelloUTF8Servlet</span>()), <span class="string">&quot;/hello-utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloDefaultServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h1&gt;哈哈&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloUTF8Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/plain; charset=UTF-8&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h1&gt;哈哈&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过curl命令来复现这个问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl localhost:8080/hello-default</span><br><span class="line">&lt;h1&gt;??&lt;/h1&gt;%</span><br><span class="line">curl localhost:8080/hello-utf8</span><br><span class="line">&lt;h1&gt;哈哈&lt;/h1&gt;%</span><br></pre></td></tr></table></figure>

<p>那么servlet里面的数据如何编码，我们可以dive一下，首先servlet里面有一个函数叫**<code>response.setCharacterEncoding();</code>**这个函数可以指定编码格式。其次，servlet还会通过上面的setContentType函数来做一定的推断，比如content-type中携带了charset，就使用content-type中的charset。还有些特定的content-type，比如text&#x2F;json，在没有设置的情况下，servlet容器会假设它使用utf-8编码。在推断不出来，也没有手动设置的情况下，jetty默认的编码是iso-8859-1，这就解释了乱码的问题。</p>
]]></content>
  </entry>
  <entry>
    <title>创建自解压的可执行文件</title>
    <url>/self-extracting-executable-file/</url>
    <content><![CDATA[<h1><span id="wei-shi-me-xu-yao-zi-jie-ya-de-ke-zhi-xing-wen-jian">为什么需要自解压的可执行文件</span><a href="#wei-shi-me-xu-yao-zi-jie-ya-de-ke-zhi-xing-wen-jian" class="header-anchor">#</a></h1><p>大部分软件的安装包是一个压缩包，用户需要自己解压，然后再执行安装脚本。常见的两种格式是<code>tar.gz</code>和<code>zip</code>。常见的解压执行脚本如下</p>
<h2><span id="tar-gz">tar.gz</span><a href="#tar-gz" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">tar -zxvf xxx.tar.gz</span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<h2><span id="zip">zip</span><a href="#zip" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">unzip xxx.zip</span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>在有些场景下，为了方便分发、安装，我们需要将多个文件和目录打包并与一个启动脚本结合。这样子就可以实现一键安装，而不需要用户自己解压文件，然后再执行启动脚本。</p>
<p>核心原理是，通过固定分隔符分隔脚本和压缩包部分，脚本通过分隔符将压缩包部分提取出来，然后解压，执行安装脚本，脚本不会超过固定分隔符。解压可以通过临时文件(zip)或流式解压(tar.gz)的方式实现。</p>
<h1><span id="chuang-jian-bao-han-zip-ya-suo-bao-de-zi-jie-ya-ke-zhi-xing-wen-jian">创建包含zip压缩包的自解压可执行文件</span><a href="#chuang-jian-bao-han-zip-ya-suo-bao-de-zi-jie-ya-ke-zhi-xing-wen-jian" class="header-anchor">#</a></h1><h2><span id="gou-zao-yi-ge-zip-ya-suo-bao">构造一个zip压缩包</span><a href="#gou-zao-yi-ge-zip-ya-suo-bao" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello zip&quot;</span> &gt; temp.txt</span><br><span class="line">zip -r temp.zip temp.txt</span><br><span class="line"><span class="built_in">rm</span> -f temp.txt</span><br></pre></td></tr></table></figure>

<h2><span id="gou-zao-ke-zhi-xing-wen-jian-self-extracting-sh">构造可执行文件 <code>self_extracting.sh</code></span><a href="#gou-zao-ke-zhi-xing-wen-jian-self-extracting-sh" class="header-anchor">#</a></h2><p>以使用<code>__ARCHIVE_BELOW__</code>做分隔符为例，<code>self_extracting.sh</code>里面内容:</p>
<p>推荐把临时文件放在内存文件路径下，这样子可以避免磁盘IO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CURRENT_DIR=<span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">ARCHIVE_START_LINE=$(awk <span class="string">&#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27;</span> <span class="variable">$0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -n+<span class="variable">$ARCHIVE_START_LINE</span> <span class="variable">$0</span> &gt; /tmp/temp.zip</span><br><span class="line">unzip /tmp/temp.zip<span class="string">&quot; -d &quot;</span><span class="variable">$CURRENT_DIR</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">rm &quot;</span><span class="variable">$CURRENT_DIR</span>/temp.zip<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># replace the following line with your own code</span></span><br><span class="line"><span class="string">cat temp.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__ARCHIVE_BELOW__</span></span><br></pre></td></tr></table></figure>

<p>将zip文件追加到<code>self_extracting.sh</code>文件的尾部</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat temp.zip &gt;&gt; self_extracting.sh</span><br><span class="line">chmod +x self_extracting.sh</span><br></pre></td></tr></table></figure>

<h1><span id="chuang-jian-bao-han-tar-gz-ya-suo-bao-de-zi-jie-ya-ke-zhi-xing-wen-jian">创建包含tar.gz压缩包的自解压可执行文件</span><a href="#chuang-jian-bao-han-tar-gz-ya-suo-bao-de-zi-jie-ya-ke-zhi-xing-wen-jian" class="header-anchor">#</a></h1><h2><span id="gou-zao-yi-ge-tar-gz-ya-suo-bao">构造一个tar.gz压缩包</span><a href="#gou-zao-yi-ge-tar-gz-ya-suo-bao" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello tar.gz&quot;</span> &gt; temp.txt</span><br><span class="line">tar -czf temp.tar.gz temp.txt</span><br><span class="line"><span class="built_in">rm</span> -f temp.txt</span><br></pre></td></tr></table></figure>

<h2><span id="gou-zao-ke-zhi-xing-wen-jian-self-extracting-sh">构造可执行文件 <code>self_extracting.sh</code></span><a href="#gou-zao-ke-zhi-xing-wen-jian-self-extracting-sh" class="header-anchor">#</a></h2><p>以使用<code>__ARCHIVE_BELOW__</code>做分隔符为例，<code>self_extracting.sh</code>里面内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CURRENT_DIR=<span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">ARCHIVE_START_LINE=$(awk <span class="string">&#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27;</span> <span class="variable">$0</span>)</span><br><span class="line"><span class="built_in">tail</span> -n+<span class="variable">$ARCHIVE_START_LINE</span> <span class="variable">$0</span> | tar xz -C <span class="string">&quot;<span class="variable">$CURRENT_DIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace the following line with your own code</span></span><br><span class="line"><span class="built_in">cat</span> temp.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">__ARCHIVE_BELOW__</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Spring单元测试总结</title>
    <url>/spring-unittests/</url>
    <content><![CDATA[<h2><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h2><ul>
<li>模块组织</li>
<li>测试手段</li>
<li>依赖组件</li>
</ul>
<h2><span id="dian-xing-spring-dan-yuan-ce-shi-mo-kuai-zu-zhi">典型Spring单元测试模块组织</span><a href="#dian-xing-spring-dan-yuan-ce-shi-mo-kuai-zu-zhi" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- xxx-app</span><br><span class="line">-- xxx-util</span><br><span class="line">-- test-common</span><br></pre></td></tr></table></figure>

<p>test-common尽量减少依赖，仅依赖必须的非spring组件。也可以统一将需要使用的resources文件放到test-common中。由test-common统一管理，避免每个模块测试都需要拷贝必须的文件。所需的maven配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-resources-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/resources<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一些典型的配置文件，比如log4j2配置文件，同时，由于test-common不属于测试代码，可能在某些组织下会有更高的要求（如不能存在敏感信息等），如组织有这样的要求，则这类内容不适合放在test-common里统一复用:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;info&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&#x27;%d&#123;yyyy-MM-dd,HH:mm:ss,SSSXXX&#125;(%C:%L):%4p%X[%t#%T]--&gt;%m%n&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2><span id="ce-shi-shou-duan">测试手段</span><a href="#ce-shi-shou-duan" class="header-anchor">#</a></h2><h3><span id="li-yong-restassured-duan-dao-duan-ce-shi-http-jie-kou">利用RestAssured端到端测试http接口</span><a href="#li-yong-restassured-duan-dao-duan-ce-shi-http-jie-kou" class="header-anchor">#</a></h3><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.rest-assured<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rest-assured<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了在SpringBoot测试中使用 <strong><code>RestAssured</code></strong>, 需要配置端口 <strong>webEnvironment &#x3D; SpringBootTest.WebEnvironment.RANDOM_PORT</strong>。如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRestControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LocalServerPort</span></span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        RestAssured.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>随后可以使用RestAssured来请求接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RestAssured.given().contentType(ContentType.JSON).body(<span class="string">&quot;&#123;&#125;&quot;</span>).post(<span class="string">&quot;url&quot;</span>).then().statusCode(<span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<h2><span id="yi-lai-zu-jian">依赖组件</span><a href="#yi-lai-zu-jian" class="header-anchor">#</a></h2><h3><span id="mariadb">mariadb</span><a href="#mariadb" class="header-anchor">#</a></h3><p>mariadb可以使用mariadb4j</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.vorburger.mariaDB4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariaDB4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>书写Extension并使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.vorburger.mariadb4j.DB;</span><br><span class="line"><span class="keyword">import</span> ch.vorburger.mariadb4j.DBConfigurationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.AfterAllCallback;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.BeforeAllCallback;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtensionContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MariaDBExtension</span> <span class="keyword">implements</span> <span class="title class_">BeforeAllCallback</span>, AfterAllCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DB database;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAll</span><span class="params">(ExtensionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DBConfigurationBuilder</span> <span class="variable">configBuilder</span> <span class="operator">=</span> DBConfigurationBuilder.newBuilder();</span><br><span class="line">        configBuilder.setPort(<span class="number">3306</span>);</span><br><span class="line">        database = DB.newEmbeddedDB(configBuilder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAll</span><span class="params">(ExtensionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (database != <span class="literal">null</span>) &#123;</span><br><span class="line">            database.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="ignite">ignite</span><a href="#ignite" class="header-anchor">#</a></h3><p>Ignite可以使用现有的junit5集成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.embedded-middleware<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>embedded-ignite-junit5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以直接使用EmbeddedIgniteExtension，还可以使用EmbeddedIgnitePorts自定义Ignite的关键端口号</p>
]]></content>
  </entry>
  <entry>
    <title>SpringCloud ZooKeeper 详解，以及与Go、Rust等非Java服务的集成</title>
    <url>/springcloud-zookeeper/</url>
    <content><![CDATA[<p>ZooKeeper，是一个开源的分布式协调服务，不仅支持分布式选举、任务分配，还可以用于微服务的注册中心和配置中心。本文，我们将深入探讨ZooKeeper用做微服务注册中心的场景。</p>
<h1><span id="zookeeper-zhong-de-fu-wu-zhu-ce-lu-jing">ZooKeeper中的服务注册路径</span><a href="#zookeeper-zhong-de-fu-wu-zhu-ce-lu-jing" class="header-anchor">#</a></h1><p>SpringCloud ZooKeeper遵循特定的路径结构进行服务注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/services/$&#123;spring.application.name&#125;/$&#123;serviceId&#125;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/services/provider-service/d87a3891-1173-45a0-bdfa-a1b60c71ef4e</span><br></pre></td></tr></table></figure>

<p><code>/services</code>和<code>/$&#123;spring.application.name&#125;</code>是ZooKeeper中的永久节点，<code>/$&#123;serviceId&#125;</code>是临时节点，当服务下线时，ZooKeeper会自动删除该节点。</p>
<p>注：当微服务的最后一个实例下线时，SpringCloud ZooKeeper框架会删除<code>/$&#123;spring.application.name&#125;</code>节点。</p>
<h1><span id="zookeeper-zhong-de-fu-wu-zhu-ce-shu-ju">ZooKeeper中的服务注册数据</span><a href="#zookeeper-zhong-de-fu-wu-zhu-ce-shu-ju" class="header-anchor">#</a></h1><p>下面是一个典型的服务注册内容示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;provider-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;d87a3891-1173-45a0-bdfa-a1b60c71ef4e&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;192.168.0.105&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span><span class="number">8080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;provider-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;provider-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;instance_status&quot;</span><span class="punctuation">:</span><span class="string">&quot;UP&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;registrationTimeUTC&quot;</span><span class="punctuation">:</span><span class="number">1695401004882</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serviceType&quot;</span><span class="punctuation">:</span><span class="string">&quot;DYNAMIC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uriSpec&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;parts&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;scheme&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;://&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;address&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;port&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中，address、port和uriSpec是最核心的数据。uriSpec中的parts区分了哪些内容是可变的，哪些是固定的。</p>
<h1><span id="springcloud-fu-wu-shi-yong-openfeign-hu-xiang-diao-yong">SpringCloud 服务使用OpenFeign互相调用</span><a href="#springcloud-fu-wu-shi-yong-openfeign-hu-xiang-diao-yong" class="header-anchor">#</a></h1><p>一旦两个微服务都注册到了ZooKeeper，那么它们就可以通过OpenFeign互相调用了。简单的示例如下</p>
<h2><span id="fu-wu-ti-gong-zhe">服务提供者</span><a href="#fu-wu-ti-gong-zhe" class="header-anchor">#</a></h2><h3><span id="chuang-jian-springboot-xiang-mu">创建SpringBoot项目</span><a href="#chuang-jian-springboot-xiang-mu" class="header-anchor">#</a></h3><p>创建SpringBoot项目，并添加<strong>spring-cloud-starter-zookeeper-discovery</strong>和<strong>spring-boot-starter-web</strong>依赖。</p>
<h3><span id="pei-zhi-application-yaml">配置application.yaml</span><a href="#pei-zhi-application-yaml" class="header-anchor">#</a></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>

<h3><span id="zhu-ce-dao-zookeeper">注册到ZooKeeper</span><a href="#zhu-ce-dao-zookeeper" class="header-anchor">#</a></h3><p>在启动类上添加<code>@EnableDiscoveryClient</code>注解。</p>
<h3><span id="chuang-jian-yi-ge-jian-dan-de-rest-jie-kou">创建一个简单的REST接口</span><a href="#chuang-jian-yi-ge-jian-dan-de-rest-jie-kou" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from Provider Service!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="fu-wu-xiao-fei-zhe">服务消费者</span><a href="#fu-wu-xiao-fei-zhe" class="header-anchor">#</a></h2><h3><span id="chuang-jian-springboot-xiang-mu">创建SpringBoot项目</span><a href="#chuang-jian-springboot-xiang-mu" class="header-anchor">#</a></h3><p>创建SpringBoot项目，并添加<strong>spring-cloud-starter-zookeeper-discovery</strong>、<strong>spring-cloud-starter-openfeign</strong>和<strong>spring-boot-starter-web</strong>依赖。</p>
<h3><span id="pei-zhi-application-yaml">配置application.yaml</span><a href="#pei-zhi-application-yaml" class="header-anchor">#</a></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<h3><span id="zhu-ce-dao-zookeeper">注册到ZooKeeper</span><a href="#zhu-ce-dao-zookeeper" class="header-anchor">#</a></h3><p>在启动类上添加<code>@EnableDiscoveryClient</code>注解。</p>
<h3><span id="chuang-jian-yi-ge-rest-jie-kou-tong-guo-openfeign-diao-yong-fu-wu-ti-gong-zhe">创建一个REST接口，通过OpenFeign调用服务提供者</span><a href="#chuang-jian-yi-ge-rest-jie-kou-tong-guo-openfeign-diao-yong-fu-wu-ti-gong-zhe" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProviderClient providerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getHello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> providerClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="yun-xing-xiao-guo">运行效果</span><a href="#yun-xing-xiao-guo" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost:8081/getHello -i</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line">Content-Length: 28</span><br><span class="line">Date: Wed, 18 Oct 2023 02:40:57 GMT</span><br><span class="line"></span><br><span class="line">Hello from Provider Service!</span><br></pre></td></tr></table></figure>

<h1><span id="fei-java-fu-wu-zai-springcloud-zookeeper-zhong-zhu-ce">非Java服务在SpringCloud ZooKeeper中注册</span><a href="#fei-java-fu-wu-zai-springcloud-zookeeper-zhong-zhu-ce" class="header-anchor">#</a></h1><p>可能有些读者乍一看觉得有点奇怪，为什么要在SpringCloud ZooKeeper中注册非Java服务呢？没有这个应用场景。</p>
<p>当然，这样的场景比较少，常见于大部分项目都是用SpringCloud开发，但有少部分项目因为种种原因，不得不使用其他语言开发，比如Go、Rust等。这时候，我们就需要在SpringCloud ZooKeeper中注册非Java服务了。</p>
<p>对于非JVM语言开发的服务，只需确保它们提供了Rest&#x2F;HTTP接口并正确地注册到ZooKeeper，就可以被SpringCloud的Feign客户端所调用。</p>
<h2><span id="go-fu-wu-zai-springcloud-zookeeper">Go服务在SpringCloud ZooKeeper</span><a href="#go-fu-wu-zai-springcloud-zookeeper" class="header-anchor">#</a></h2><p>example代码组织：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── consumer</span><br><span class="line">│   └── consumer.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── provider</span><br><span class="line">    └── provider.go</span><br></pre></td></tr></table></figure>

<h3><span id="go-fu-wu-ti-gong-zhe-zai-springcloud-zookeeper">Go服务提供者在SpringCloud ZooKeeper</span><a href="#go-fu-wu-ti-gong-zhe-zai-springcloud-zookeeper" class="header-anchor">#</a></h3><p>注：该代码的质量为demo级别，实际生产环境需要更加严谨的代码，如重连机制、超时机制、更优秀的服务ID生成算法等。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/samuel/go-zookeeper/zk&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	zkServers = <span class="string">&quot;localhost:2181&quot;</span> <span class="comment">// Zookeeper服务器地址</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化gin框架</span></span><br><span class="line">	r := gin.Default()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加一个简单的hello接口</span></span><br><span class="line">	r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;Hello from Go service!&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册服务到zookeeper</span></span><br><span class="line">	registerToZookeeper()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动gin服务器</span></span><br><span class="line">	r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerToZookeeper</span><span class="params">()</span></span> &#123;</span><br><span class="line">	conn, _, err := zk.Connect([]<span class="type">string</span>&#123;zkServers&#125;, time.Second*<span class="number">5</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查并创建父级路径</span></span><br><span class="line">	ensurePathExists(conn, <span class="string">&quot;/services&quot;</span>)</span><br><span class="line">	ensurePathExists(conn, <span class="string">&quot;/services/provider-service&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构建注册的数据</span></span><br><span class="line">	data, _ := json.Marshal(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>:        <span class="string">&quot;provider-service&quot;</span>,</span><br><span class="line">		<span class="string">&quot;address&quot;</span>:     <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">		<span class="string">&quot;port&quot;</span>:        <span class="number">8080</span>,</span><br><span class="line">		<span class="string">&quot;sslPort&quot;</span>:     <span class="literal">nil</span>,</span><br><span class="line">		<span class="string">&quot;payload&quot;</span>:     <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;@class&quot;</span>: <span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;provider-service&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;provider-service&quot;</span>, <span class="string">&quot;metadata&quot;</span>: <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;instance_status&quot;</span>: <span class="string">&quot;UP&quot;</span>&#125;&#125;,</span><br><span class="line">		<span class="string">&quot;serviceType&quot;</span>: <span class="string">&quot;DYNAMIC&quot;</span>,</span><br><span class="line">		<span class="string">&quot;uriSpec&quot;</span>: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">			<span class="string">&quot;parts&quot;</span>: []<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;scheme&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;://&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;:&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;port&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 在zookeeper中注册服务</span></span><br><span class="line">	path := <span class="string">&quot;/services/provider-service/&quot;</span> + generateServiceId()</span><br><span class="line">	_, err = conn.Create(path, data, zk.FlagEphemeral, zk.WorldACL(zk.PermAll))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;register service error: %s&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.Println(path)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ensurePathExists</span><span class="params">(conn *zk.Conn, path <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	exists, _, err := conn.Exists(path)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;check path error: %s&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !exists &#123;</span><br><span class="line">		_, err := conn.Create(path, []<span class="type">byte</span>&#123;&#125;, <span class="number">0</span>, zk.WorldACL(zk.PermAll))</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatalf(<span class="string">&quot;create path error: %s&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateServiceId</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="comment">// 这里简化为使用当前时间生成ID，实际生产环境可能需要更复杂的算法</span></span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, time.Now().UnixNano())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost:8081/getHello -i</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line">Content-Length: 28</span><br><span class="line">Date: Wed, 18 Oct 2023 02:43:52 GMT</span><br><span class="line"></span><br><span class="line">Hello from Go Service!</span><br></pre></td></tr></table></figure>

<h2><span id="go-fu-wu-xiao-fei-zhe-zai-springcloud-zookeeper">Go服务消费者在SpringCloud ZooKeeper</span><a href="#go-fu-wu-xiao-fei-zhe-zai-springcloud-zookeeper" class="header-anchor">#</a></h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/samuel/go-zookeeper/zk&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	zkServers = <span class="string">&quot;localhost:2181&quot;</span> <span class="comment">// Zookeeper服务器地址</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> conn *zk.Conn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化ZooKeeper连接</span></span><br><span class="line">	initializeZookeeper()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取服务信息</span></span><br><span class="line">	serviceInfo := getServiceInfo(<span class="string">&quot;/services/provider-service&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Fetched service info:&quot;</span>, serviceInfo)</span><br><span class="line"></span><br><span class="line">	port := <span class="type">int</span>(serviceInfo[<span class="string">&quot;port&quot;</span>].(<span class="type">float64</span>))</span><br><span class="line"></span><br><span class="line">	resp, err := http.Get(fmt.Sprintf(<span class="string">&quot;http://%s:%d/hello&quot;</span>, serviceInfo[<span class="string">&quot;address&quot;</span>], port))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	body, err := io.ReadAll(resp.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initializeZookeeper</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	conn, _, err = zk.Connect([]<span class="type">string</span>&#123;zkServers&#125;, time.Second*<span class="number">5</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;Failed to connect to ZooKeeper: %s&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getServiceInfo</span><span class="params">(path <span class="type">string</span>)</span></span> <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">	children, _, err := conn.Children(path)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;Failed to get children of %s: %s&quot;</span>, path, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(children) == <span class="number">0</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;No services found under %s&quot;</span>, path)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这里只获取第一个服务节点的信息作为示例，实际上可以根据负载均衡策略选择一个服务节点</span></span><br><span class="line">	data, _, err := conn.Get(fmt.Sprintf(<span class="string">&quot;%s/%s&quot;</span>, path, children[<span class="number">0</span>]))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;Failed to get data of %s: %s&quot;</span>, children[<span class="number">0</span>], err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> serviceInfo <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> err := json.Unmarshal(data, &amp;serviceInfo); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;Failed to unmarshal data: %s&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> serviceInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="rust-fu-wu-zai-springcloud-zookeeper">Rust服务在SpringCloud ZooKeeper</span><a href="#rust-fu-wu-zai-springcloud-zookeeper" class="header-anchor">#</a></h2><p>example代码组织：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── Cargo.lock</span><br><span class="line">├── Cargo.toml</span><br><span class="line">└── src</span><br><span class="line">    └── bin</span><br><span class="line">        ├── consumer.rs</span><br><span class="line">        └── provider.rs</span><br></pre></td></tr></table></figure>

<h3><span id="rust-fu-wu-ti-gong-zhe-zai-springcloud-zookeeper">Rust服务提供者在SpringCloud ZooKeeper</span><a href="#rust-fu-wu-ti-gong-zhe-zai-springcloud-zookeeper" class="header-anchor">#</a></h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"><span class="keyword">use</span> serde_json::Value;</span><br><span class="line"><span class="keyword">use</span> warp::Filter;</span><br><span class="line"><span class="keyword">use</span> zookeeper::&#123;Acl, CreateMode, WatchedEvent, Watcher, ZooKeeper&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> ZK_SERVERS: &amp;<span class="type">str</span> = <span class="string">&quot;localhost:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> ZK_CONN: <span class="type">Option</span>&lt;ZooKeeper&gt; = <span class="literal">None</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoggingWatcher</span>;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Watcher</span> <span class="keyword">for</span> <span class="title class_">LoggingWatcher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">handle</span>(&amp;<span class="keyword">self</span>, e: WatchedEvent) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;WatchedEvent: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">hello</span> = warp::path!(<span class="string">&quot;hello&quot;</span>).<span class="title function_ invoke__">map</span>(|| warp::reply::<span class="title function_ invoke__">html</span>(<span class="string">&quot;Hello from Rust service!&quot;</span>));</span><br><span class="line">    <span class="title function_ invoke__">register_to_zookeeper</span>().<span class="keyword">await</span>;</span><br><span class="line"></span><br><span class="line">    warp::<span class="title function_ invoke__">serve</span>(hello).<span class="title function_ invoke__">run</span>(([<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], <span class="number">8083</span>)).<span class="keyword">await</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">register_to_zookeeper</span>() &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        ZK_CONN = <span class="title function_ invoke__">Some</span>(ZooKeeper::<span class="title function_ invoke__">connect</span>(ZK_SERVERS, Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">5</span>), LoggingWatcher).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">zk</span> = ZK_CONN.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">path</span> = <span class="string">&quot;/services/provider-service&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> zk.<span class="title function_ invoke__">exists</span>(path, <span class="literal">false</span>).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">is_none</span>() &#123;</span><br><span class="line">            zk.<span class="title function_ invoke__">create</span>(path, <span class="built_in">vec!</span>[], Acl::<span class="title function_ invoke__">open_unsafe</span>().<span class="title function_ invoke__">clone</span>(), CreateMode::Persistent).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">service_data</span> = <span class="title function_ invoke__">get_service_data</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">service_path</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>, path, <span class="title function_ invoke__">generate_service_id</span>());</span><br><span class="line">        zk.<span class="title function_ invoke__">create</span>(&amp;service_path, service_data, Acl::<span class="title function_ invoke__">open_unsafe</span>().<span class="title function_ invoke__">clone</span>(), CreateMode::Ephemeral).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_service_data</span>() <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">data</span>: HashMap&lt;&amp;<span class="type">str</span>, Value&gt; = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    data.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;name&quot;</span>, serde_json::Value::<span class="title function_ invoke__">String</span>(<span class="string">&quot;provider-service&quot;</span>.<span class="title function_ invoke__">to_string</span>()));</span><br><span class="line">    data.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;address&quot;</span>, serde_json::Value::<span class="title function_ invoke__">String</span>(<span class="string">&quot;127.0.0.1&quot;</span>.<span class="title function_ invoke__">to_string</span>()));</span><br><span class="line">    data.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;port&quot;</span>, serde_json::Value::<span class="title function_ invoke__">Number</span>(<span class="number">8083</span>.<span class="title function_ invoke__">into</span>()));</span><br><span class="line">    serde_json::<span class="title function_ invoke__">to_vec</span>(&amp;data).<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">generate_service_id</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, chrono::Utc::<span class="title function_ invoke__">now</span>().<span class="title function_ invoke__">timestamp_nanos</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="rust-fu-wu-xiao-fei-zhe-zai-springcloud-zookeeper">Rust服务消费者在SpringCloud ZooKeeper</span><a href="#rust-fu-wu-xiao-fei-zhe-zai-springcloud-zookeeper" class="header-anchor">#</a></h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"><span class="keyword">use</span> zookeeper::&#123;WatchedEvent, Watcher, ZooKeeper&#125;;</span><br><span class="line"><span class="keyword">use</span> reqwest;</span><br><span class="line"><span class="keyword">use</span> serde_json::Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> ZK_SERVERS: &amp;<span class="type">str</span> = <span class="string">&quot;localhost:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoggingWatcher</span>;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Watcher</span> <span class="keyword">for</span> <span class="title class_">LoggingWatcher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">handle</span>(&amp;<span class="keyword">self</span>, e: WatchedEvent) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;WatchedEvent: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">provider_data</span> = <span class="title function_ invoke__">fetch_provider_data_from_zookeeper</span>().<span class="keyword">await</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">response</span> = <span class="title function_ invoke__">request_provider</span>(&amp;provider_data).<span class="keyword">await</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Response from provider: &#123;&#125;&quot;</span>, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">fetch_provider_data_from_zookeeper</span>() <span class="punctuation">-&gt;</span> HashMap&lt;<span class="type">String</span>, Value&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">zk</span> = ZooKeeper::<span class="title function_ invoke__">connect</span>(ZK_SERVERS, Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">5</span>), LoggingWatcher).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">children</span> = zk.<span class="title function_ invoke__">get_children</span>(<span class="string">&quot;/services/provider-service&quot;</span>, <span class="literal">false</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">if</span> children.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">&quot;No provider services found!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For simplicity, we just take the first child (i.e., service instance). </span></span><br><span class="line">    <span class="comment">// In a real-world scenario, load balancing strategies would determine which service instance to use.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">data</span> = zk.<span class="title function_ invoke__">get_data</span>(&amp;<span class="built_in">format!</span>(<span class="string">&quot;/services/provider-service/&#123;&#125;&quot;</span>, children[<span class="number">0</span>]), <span class="literal">false</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    serde_json::<span class="title function_ invoke__">from_slice</span>(&amp;data.<span class="number">0</span>).<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">request_provider</span>(provider_data: &amp;HashMap&lt;<span class="type">String</span>, Value&gt;) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">address</span> = provider_data.<span class="title function_ invoke__">get</span>(<span class="string">&quot;address&quot;</span>).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_str</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">port</span> = provider_data.<span class="title function_ invoke__">get</span>(<span class="string">&quot;port&quot;</span>).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_i64</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = <span class="built_in">format!</span>(<span class="string">&quot;http://&#123;&#125;:&#123;&#125;/hello&quot;</span>, address, port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">response</span> = reqwest::<span class="title function_ invoke__">get</span>(&amp;url).<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    response.<span class="title function_ invoke__">text</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>微服务广播模式实践</title>
    <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%B9%BF%E6%92%AD%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>微服务广播模式，指的是在微服务多实例部署的场景下，将消息广播到多个微服务实例的一种模式。</p>
<p><img src="/images/20230601/p1.png" alt="Untitled"></p>
<p>广播模式，一般用来维护微服务的内存数据，根据数据类型的不同，有助于解决两类问题。通常广播模式会使用支持发布订阅的消息中间件实现（如Redis、Kafka、Pulsar等），本文也基于消息中间件进行讨论。</p>
<h2><span id="li-yong-guang-bo-mo-shi-wei-hu-yi-zhi-de-huan-cun">利用广播模式维护一致的缓存</span><a href="#li-yong-guang-bo-mo-shi-wei-hu-yi-zhi-de-huan-cun" class="header-anchor">#</a></h2><p>这应该是广播模式利用最多的一种场景，假想一个拥有海量用户的电商网站、或是一个亿级设备连接的IoT平台。势必会存在一些缓存数据，像是用户的购物车信息，或是设备的密钥缓存。如果没有广播模式，可能会存在这样的问题</p>
<p><img src="/images/20230601/p2.png" alt="Untitled"></p>
<p>当用户更新了它的购物车之后，微服务实例1的数据发生了更新，数据库的数据也成功更新。但是微服务实例2中的缓存数据未能更新，那么如果用户的请求均衡到了实例2，就会发生意想不到的后果。</p>
<p>这种情况下我们可以让微服务1在广播通道中发送一个缓存的invalidate消息，将微服务实例2中该用户的缓存清零，使得微服务实例2在下一次处理该用户的请求时，从数据库中读取最新的消息。</p>
<p>使用该模式需要注意的点：</p>
<ul>
<li>每个微服务实例应该使用不同的消费组，可以通过微服务的IP、主机名、UUID等拼装成订阅组名称，这才称得上广播之名</li>
<li>微服务消费消息的时候，应从Latest开始消费，避免从Earliest开始消费无用的缓存清理消息</li>
<li>由于每一次微服务重启都会产生一个新的消费组，需要注意消费组的老化，可以通过消息中间件自带的不活跃消费组老化能力兜底，建议通过gracefulExit、监听kill信号等机制来主动删除消费组信息</li>
</ul>
<p>为什么说消费组老化比较重要呢，因为很多监控系统都会根据消费组的积压来做告警，很容易产生误告警。</p>
<h2><span id="li-yong-guang-bo-mo-shi-wei-hu-nei-cun-zhong-de-shu-ju">利用广播模式维护内存中的数据</span><a href="#li-yong-guang-bo-mo-shi-wei-hu-nei-cun-zhong-de-shu-ju" class="header-anchor">#</a></h2><p>这种模式相对比较少见，常见于key的基数不是很大，能够将数据完整地存储在内存中，比如电商平台的企业卖家个数、物联网平台的用户个数等，并且对数据的一致性要求不是很高（因为广播模式情况下，对于两个微服务实例来说没有一致性保障）。像Apache Pulsar设计的TableView，在我看来，就是做这个事的一个最佳实践。Pulsar内部大量使用了topic存储数据，就是采用这个方式。</p>
<p>使用该模式需要注意的点：</p>
<ul>
<li>同上，需要使用不同的消费组名称</li>
<li>微服务消费消息的时候，应该从Earliest开始消费，保证所有微服务内存中的消息视图一致</li>
<li>同上，需要注意消费组的老化</li>
</ul>
<h2><span id="wei-shi-me-xu-yao-xiao-fei-zu-lao-hua-zuo-wei-bao-di-shou-duan">为什么需要消费组老化作为保底手段</span><a href="#wei-shi-me-xu-yao-xiao-fei-zu-lao-hua-zuo-wei-bao-di-shou-duan" class="header-anchor">#</a></h2><p>因为在极端场景下，无论是graceful的代码，还是监听kill信号的代码，都不能保证代码百分百地被执行。需要兜底。</p>
<h2><span id="kafka-xiao-fei-zu-lao-hua">Kafka消费组老化</span><a href="#kafka-xiao-fei-zu-lao-hua" class="header-anchor">#</a></h2><p>Kafka通过<strong>offsets.retention.minutes</strong>参数控制消费组中offsets保留时间，在此时间内如果没有提交offset，offsets将会被删除。Kafka判定消息组中没有在线的消费者（如empty状态），且没有offsets时，将会删除此消费组。</p>
<h2><span id="pulsar-xiao-fei-zu-lao-hua">Pulsar消费组老化</span><a href="#pulsar-xiao-fei-zu-lao-hua" class="header-anchor">#</a></h2><p>pulsar的消费组老化策略更加灵活，可以配置到namespace级别。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/pulsar-admin namespaces | grep expiration</span><br><span class="line">    get-subscription-expiration-time      Get subscription expiration time for </span><br><span class="line">      Usage: get-subscription-expiration-time [options] tenant/namespace</span><br><span class="line">    set-subscription-expiration-time      Set subscription expiration time for </span><br><span class="line">      Usage: set-subscription-expiration-time [options] tenant/namespace</span><br><span class="line">            Subscription expiration time in minutes</span><br><span class="line">    remove-subscription-expiration-time      Remove subscription expiration </span><br><span class="line">      Usage: remove-subscription-expiration-time [options] tenant/namespace</span><br></pre></td></tr></table></figure>

<p>这里注意要合理地配置消费组的老化时间，在pulsar的当前版本（2.11版本）下，catch up读，也就是说消费组平时积压量不大。如果将消费组的老化时间配置大于等于消息的老化时间，会出现消费组老化不了的现象。</p>
<p>当然，由于消费组和消息老化都是定时任务，预估时间时，要考虑一定的buffer。</p>
<p>这里让我们稍稍dive一下原理，消费组的老化是通过判断Cursor游标的LastActive time来判断能否老化的。如果该消费组的游标位置到达了消息老化区域，被老化掉了，消费组的游标位置就会强制更新到一个可用的位置，这个时候会更新游标的LastActive time到当前时间，周而复始，导致消费组无法老化。举个🌰</p>
<p>假设消费组的老化时间为4h，消息的老化时间为3h，就可能会发生这样的事情</p>
<p><img src="/images/20230601/p3.png" alt="Untitled"></p>
<h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>广播模式在微服务架构中起到了重要的角色，尤其是在需要在微服务实例之间同步数据的场景中，它具有显著的优势。它能够帮助维护内存数据的缓存一致性。希望本篇文章能提供您全面的广播模式的知识。</p>
]]></content>
  </entry>
  <entry>
    <title>容器内指定特定域名解析结果的几种方式</title>
    <url>/%E5%AE%B9%E5%99%A8%E5%86%85%E6%8C%87%E5%AE%9A%E7%89%B9%E5%AE%9A%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E7%BB%93%E6%9E%9C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>在本篇文章中，我们将探讨如何在容器内指定特定域名解析结果的几种方式。为了方便演示，首先我们创建一个演示用的Deployment配置文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;while true; do echo Hello, Kubernetes!; sleep 10;done&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个deployment会创建1个busybox的pod，容器每隔10s会打印“Hello, Kubernetes!”到控制台</p>
<h2><span id="tl-dr">TL;DR</span><a href="#tl-dr" class="header-anchor">#</a></h2><table>
<thead>
<tr>
<th>方案</th>
<th>修改级别</th>
<th>是否推荐</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>修改&#x2F;etc&#x2F;hosts</td>
<td>pod</td>
<td>否</td>
<td></td>
</tr>
<tr>
<td>添加HostAliases记录</td>
<td>pod&#x2F;deploy&#x2F;statefulset</td>
<td>是</td>
<td></td>
</tr>
<tr>
<td>修改Coredns配置</td>
<td>整个kubernetes集群</td>
<td>是</td>
<td></td>
</tr>
<tr>
<td>自定义DNS策略</td>
<td>pod&#x2F;deploy&#x2F;statefulset</td>
<td>视情况而定</td>
<td>如需对接三方的DNS服务器，推荐采用</td>
</tr>
<tr>
<td>使用三方DNS插件</td>
<td>整个kubernetes集群</td>
<td>否</td>
<td>不推荐，Coredns为业内主流</td>
</tr>
</tbody></table>
<h2><span id="xiu-gai-x2f-etc-x2f-hosts">修改&#x2F;etc&#x2F;hosts</span><a href="#xiu-gai-x2f-etc-x2f-hosts" class="header-anchor">#</a></h2><p>修改&#x2F;etc&#x2F;hosts是最传统的方式，直接在容器内修改相应的文件来实现域名解析，在Pod级别生效。由于其可维护性较差（每次pod发生重启都需要手动修改），不推荐在生产环境使用。</p>
<p>例如，我们可以在&#x2F;etc&#x2F;hosts里面添加这样一条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">250.250.250.250 four-250</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ # ping four-250</span><br><span class="line">PING four-250 (250.250.250.250): 56 data bytes</span><br></pre></td></tr></table></figure>

<h2><span id="tian-jia-hostaliases-ji-lu">添加HostAliases记录</span><a href="#tian-jia-hostaliases-ji-lu" class="header-anchor">#</a></h2><p>HostAliases是kubernetes中Pod配置的一个字段，它提供了Pod内容器的<code>/etc/hosts</code>文件的附加记录。这在某些情况下非常有用，特别是当你想要覆盖某个主机名的解析结果，或者提供网络中没有的主机名解析时。</p>
<p>这个可以在Pod、Replica、Deployment、StatefulSet的级别修改，维护性稍强。举个🌰，我们将上面的yaml修改为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostAliases:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">&quot;250.250.250.250&quot;</span></span><br><span class="line">        <span class="attr">hostnames:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;four-250&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;while true; do echo Hello, Kubernetes!; sleep 10;done&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个时候我们查看容器的&#x2F;etc&#x2F;hosts，发现它被kubernetes自动插入了一条记录<strong>Entries add by HostAliases。</strong>这就是hostAliases的实现原理</p>
<p>在<strong>kubelet_pods</strong>代码中进行了这样的写入动作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hostsEntriesFromHostAliases</span><span class="params">(hostAliases []v1.HostAlias)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(hostAliases) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> []<span class="type">byte</span>&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">	buffer.WriteString(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	buffer.WriteString(<span class="string">&quot;# Entries added by HostAliases.\n&quot;</span>)</span><br><span class="line">	<span class="comment">// for each IP, write all aliases onto single line in hosts file</span></span><br><span class="line">	<span class="keyword">for</span> _, hostAlias := <span class="keyword">range</span> hostAliases &#123;</span><br><span class="line">		buffer.WriteString(fmt.Sprintf(<span class="string">&quot;%s\t%s\n&quot;</span>, hostAlias.IP, strings.Join(hostAlias.Hostnames, <span class="string">&quot;\t&quot;</span>)))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> buffer.Bytes()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="coredns-pei-zhi">Coredns配置</span><a href="#coredns-pei-zhi" class="header-anchor">#</a></h2><p>我们可以通过修改ConfigMap来实现让容器解析特定域名的目的。</p>
<h3><span id="geng-gai-coredns-pei-zhi">更改Coredns配置</span><a href="#geng-gai-coredns-pei-zhi" class="header-anchor">#</a></h3><p>我们可以通过以下命令修改Coredns的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl edit cm coredns -n kube-system</span><br></pre></td></tr></table></figure>

<h3><span id="yuan-you-de-configmap">原有的configmap</span><a href="#yuan-you-de-configmap" class="header-anchor">#</a></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Corefile:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    .:53 &#123;</span></span><br><span class="line"><span class="string">        log</span></span><br><span class="line"><span class="string">        errors</span></span><br><span class="line"><span class="string">        health &#123;</span></span><br><span class="line"><span class="string">           lameduck 5s</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        ready</span></span><br><span class="line"><span class="string">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span></span><br><span class="line"><span class="string">           pods insecure</span></span><br><span class="line"><span class="string">           fallthrough in-addr.arpa ip6.arpa</span></span><br><span class="line"><span class="string">           ttl 30</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        prometheus :9153</span></span><br><span class="line"><span class="string">        hosts &#123;</span></span><br><span class="line"><span class="string">           192.168.65.2 host.minikube.internal</span></span><br><span class="line"><span class="string">           fallthrough</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        forward . /etc/resolv.conf &#123;</span></span><br><span class="line"><span class="string">           max_concurrent 1000</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cache 30</span></span><br><span class="line"><span class="string">        loop</span></span><br><span class="line"><span class="string">        reload</span></span><br><span class="line"><span class="string">        loadbalance</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure>

<p>在hosts里面加上特定的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">250.250.250.250 four-250</span><br></pre></td></tr></table></figure>

<p>如果您没有配置reload插件，则需要重启Coredns才能生效，默认的reload时间是30s，在plugin&#x2F;reload&#x2F;setup.go的defaultInterval中定义</p>
<h2><span id="zi-ding-yi-dns-ce-lue">自定义DNS策略</span><a href="#zi-ding-yi-dns-ce-lue" class="header-anchor">#</a></h2><p>通过修改DNS策略。使得对于单个Pod&#x2F;Deploy&#x2F;StatefulSet将特定的域名解析发给特定的服务器来达到效果，如下，可以对pod添加dns的服务器以及search域</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">   <span class="attr">dnsConfig:</span></span><br><span class="line">     <span class="attr">nameservers:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line">     <span class="attr">searches:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">search.prefix</span></span><br><span class="line">   <span class="attr">containers:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">     <span class="attr">args:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;while true; do echo Hello, Kubernetes!; sleep 10;done&quot;</span></span><br></pre></td></tr></table></figure>

<h2><span id="shi-yong-di-san-fang-dns-cha-jian">使用第三方DNS插件</span><a href="#shi-yong-di-san-fang-dns-cha-jian" class="header-anchor">#</a></h2><p>不推荐，使用其他的DNS插件，来做一些炫酷的自定义操作。而且目前Coredns也是业内的主流，没有很好的替代</p>
]]></content>
  </entry>
  <entry>
    <title>打造可商用的Java程序之可维护性</title>
    <url>/%E6%89%93%E9%80%A0%E5%8F%AF%E5%95%86%E7%94%A8%E7%9A%84Java%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/</url>
    <content><![CDATA[<h2><span id="zai-zhu-han-shu-zhong-bu-huo-wei-chu-li-de-yi-chang">在主函数中捕获未处理的异常</span><a href="#zai-zhu-han-shu-zhong-bu-huo-wei-chu-li-de-yi-chang" class="header-anchor">#</a></h2><p>在主函数中捕获未处理的异常，防止程序崩溃，同时记录日志，方便排查问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UncaughtExceptionHandle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler((t, e) -&gt; log.error(<span class="string">&quot;Uncaught exception: &quot;</span>, e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>提升网络协议服务器的定位能力</title>
    <url>/%E6%8F%90%E5%8D%87%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%AE%9A%E4%BD%8D%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<p>近期，我再次涉足于协议服务器相关的工作领域，致力于定位并解决各种问题。简单总结一些心得给大家。如果想要定位出协议服务器的问题，那么这些能力可能至关重要。</p>
<p>注：我这里比较偏向协议本身的问题，不涉及一些通用的网络问题（如网络吞吐量上不去、响应时间长等等）</p>
<h2><span id="dui-cpu-he-nei-cun-de-tong-yong-fen-xi-neng-li">对CPU和内存的通用分析能力</span><a href="#dui-cpu-he-nei-cun-de-tong-yong-fen-xi-neng-li" class="header-anchor">#</a></h2><p>首先，网络协议服务器本质上也是一个应用程序。因此，需要具备一些关于CPU和内存的通用分析能力。PU&#x2F;内存火焰图，内存dump分析，锁分析，以及远程调试（研发态手段）这些手段都要具备</p>
<h2><span id="ri-zhi-he-wang-luo-lian-jie-de-guan-lian">日志和网络连接的关联</span><a href="#ri-zhi-he-wang-luo-lian-jie-de-guan-lian" class="header-anchor">#</a></h2><p>为了有效地定位网络问题，日志需要精确到毫秒级别。没有毫秒级别的精度，定位网络问题就会变得极其困难。所以golang的logrus默认只有秒级别，我觉得不太好，用rfc3339就很好。</p>
<p>在打印日志时，我们不能太过随意。例如，“connection lost”这样的日志，在调试阶段可能看似无大碍，但当真正的业务量和连接数大幅增加时，这种模糊的日志信息就会让人束手无策。</p>
<p>理想的日志至少应包含网络地址信息，这样我们可以根据网络地址和时间点来查阅日志。如果有抓包的话，那就更好了，可以从中获取大量信息。</p>
<p>当然，我们并不需要在所有的日志中都包含网络地址信息。例如，一旦完成了用户身份的鉴定，我们就可以打印用户的身份信息，这样更方便与后续的业务流程进行整合。如果需要查询网络地址信息，可以回溯到建立连接时的日志。举个🌰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-05-30 23:59:01.000 [INFO] 127.0.0.1:62345 connected</span><br><span class="line">2023-05-30 23:59:02.000 [INFO] 127.0.0.1:62345 authed, username is Wolverine</span><br><span class="line">2023-05-30 23:59:03.000 [INFO] Wolverine killed magneto</span><br></pre></td></tr></table></figure>

<p>假设一条数据链上有大量的消息呢？在现代的网络环境中，一条TCP链接可以轻易达到5M bit&#x2F;s以上的数据流。即使我们提供了时间点信息，仍然很难找到具有问题的报文（在同一秒内可能有上千条报文）。在这种情况下，就需要引入会话的ID信息。许多TCP协议会携带这种信息，换句话说，支持IO复用的协议都会有这种信息（比如MQTT的messageId，Kafka的correlationId等）。此类信息应该被正确地打印在日志中。</p>
<h2><span id="zhen-dui-te-zheng-zhi-de-gen-zong-neng-li">针对特征值的跟踪能力</span><a href="#zhen-dui-te-zheng-zhi-de-gen-zong-neng-li" class="header-anchor">#</a></h2><p>你可能已经在调试日志中包含了非常详尽的信息，然而在实际环境中，这可能并没有太大用处。</p>
<p>原因是一旦全面开启debug日志，性能消耗会大幅增加。除非你的系统性能冗余极大，否则根本无法正常运行。</p>
<p>为此，我们可以提升debug的能力，针对特定的特征值开启debug，例如网络地址、mqtt的clientId、消息中间件的topic等。应用程序仅针对这些特征值打印详细的日志，这样的开销就相对较小，而且这种方法已经在生产环境中被我多次验证。</p>
<h2><span id="jiang-wang-luo-bao-wen-yu-ye-wu-trace-guan-lian-qi-lai">将网络报文与业务trace关联起来</span><a href="#jiang-wang-luo-bao-wen-yu-ye-wu-trace-guan-lian-qi-lai" class="header-anchor">#</a></h2><p>在网络协议服务器中，我们需要将网络报文与业务trace关联起来。这种关联能力的实现可以大大提高我们定位业务端到端问题的效率和准确性。 理想情况下，我们应该能够根据网络报文来查找相关的业务trace，反之亦然，根据业务trace来查找对应的网络报文。但这些手段都需要业务端的配合，比如在报文中携带traceId，或者在业务trace中携带网络地址信息。</p>
<p>以mqtt协议为例，可以在payload中带上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;traceId&quot;: &quot;xxxx&quot;,</span><br><span class="line">    &quot;data&quot;: &quot;xxxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>traceId</code>就是我们为业务trace设定的唯一标识符，而<code>data</code>则是实际的业务数据。通过在网络报文中携带这些信息，我们就可以轻松地将网络报文与其对应的业务trace关联起来。</p>
<p>然而，这种方法在研发和测试环境中实现相对容易，但在生产环境中可能会遇到更多的困难。首先，对于在网络报文中携带<code>traceId</code>这一做法，业界并未形成统一的规范和实践。这导致在生产环境，极难做到。</p>
<p>更具挑战性的是，如果你面对的是一个端到端的复杂系统，将traceId从系统的入口传递到出口可能会遇到许多难以预见的问题。例如系统不支持这类数据的专递，这就封死了这条路。</p>
<h2><span id="cha-kan-yuan-shi-bao-wen-de-neng-li">查看原始报文的能力</span><a href="#cha-kan-yuan-shi-bao-wen-de-neng-li" class="header-anchor">#</a></h2><p>查看原始报文的能力极其重要，特别是在协议栈的实现尚不成熟的情况下。如果无法查看原始报文，定位问题就会变得非常困难。我曾说过：“如果拿到了原始报文，还是无法复现问题，那我们的研发能力在哪里？”虽然这句话可能有些极端，但它准确地强调了抓包的重要性。</p>
<p>我们可以从抓包看出网络的连通性、网络的延迟、网络的吞吐量、报文的格式、报文的正确性等等。如果途径了多个网元，那么是谁的错？（一般来说，看抓包，谁先发RST，就从谁身上找原因）</p>
<p>虽然抓包的命令比较简单<em>tcpdump port 8080 -i eth0 -s0 -w my.pcap</em>就抓了，但实际想做成，最大的阻力是这两个，TLS和复杂的现网环境</p>
<p>在旧版本的TLS密钥交换算法下，只要有私钥和密码，就可以顺利解包，但现在的tls，都支持前向加密，什么叫前向加密呢？简单地来说，就是给你私钥和密码，你也解不出来。有tls debuginfo和ebpf能解决这两个问题，tls debug-info的原理是将密钥交换时的密钥输出持久化到某个地方，然后拿这个去解，实际很少见有人用这个方案。ebpf一需要linux内核高版本，同时还需要开启功能，安装kernel-debug-info，门槛也比较高。</p>
<p>现网环境，像抓包嗅探的这种工具，有时候可能是禁止上传的，或者即使能上传成功，也需要很长的时间。</p>
<p>也许我们可以通过“应用层抓包”来解决上述的问题，在网络层，我们支持受限的抓包能力，比如可以抓针对某个特征值（比如网络地址、messageId）的包，因为我们在应用层，可使用的过滤条件更多，更精细，输出到某个路径，这个报文的组装，完全在应用网络层，虽然看不到物理层的一些信息，但对于应用程序来说，除非我是做nat设备的，一般用不到这些信息。继续用这个报文来分析问题。实现应用层抓包，也要注意对内存的占用等等，不能因为这个功能，把整个进程搞崩溃。</p>
<h2><span id="ying-yong-ceng-zhua-bao-de-yi-xie-si-kao">应用层抓包的一些思考</span><a href="#ying-yong-ceng-zhua-bao-de-yi-xie-si-kao" class="header-anchor">#</a></h2><h3><span id="zhua-bao-di-dian-de-xuan-ze">抓包地点的选择</span><a href="#zhua-bao-di-dian-de-xuan-ze" class="header-anchor">#</a></h3><p>在应用层抓包，第一步就是确定抓包的地点。由于我们是在应用层进行操作，因此抓包地点一般位于应用程序与网络协议栈的交接处。例如，你可以在数据包刚被应用接收，还未被处理之前进行抓包，或者在数据包即将被应用发送出去，还未进入网络协议栈之前进行抓包。</p>
<h3><span id="guo-lu-tiao-jian-de-she-ding">过滤条件的设定</span><a href="#guo-lu-tiao-jian-de-she-ding" class="header-anchor">#</a></h3><p>设定过滤条件是抓包的关键，因为在实际环境中，数据流量可能非常大，如果没有过滤条件，抓包的数据量可能会非常庞大，对应用和系统的性能产生影响。在应用层，我们可以设置更多更精细的过滤条件，如网络地址、端口、协议类型、特定的字段等。这些过滤条件可以帮助我们更精确地定位问题，减少无效的数据。</p>
<h3><span id="shu-ju-cun-chu-wen-ti">数据存储问题</span><a href="#shu-ju-cun-chu-wen-ti" class="header-anchor">#</a></h3><p>将抓到的数据存储起来也是很重要的一步。可以选择将数据存储到内存或者硬盘。需要注意的是，如果选择存储到内存，要考虑到内存的大小，避免因为抓包数据过大导致内存溢出。如果选择存储到硬盘，要考虑到硬盘的读写速度和容量，避免因为抓包数据过大导致硬盘满载。</p>
<h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>本文首先阐述了网络协议服务器的一些问题定位能力，包括CPU内存分析能力、日志和网络连接的关联能力、针对特征值的跟踪能力，以及查看原始报文的能力，也讨论了将网络报文与业务trace有效关联的重要性和实现挑战。强调了抓包的重要性和对于解密TLS报文的挑战。为了解决网络层抓包遇到的困难，我们可以考虑应用层抓包方案。最后，我们讨论了应用层抓包的一些关键问题，包括抓包地点的选择、过滤条件的设定和数据存储问题。</p>
]]></content>
  </entry>
  <entry>
    <title>敏感信息打印大全</title>
    <url>/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%89%93%E5%8D%B0%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h2><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h2><h2><span id="apache-http-client">Apache http client</span><a href="#apache-http-client" class="header-anchor">#</a></h2><h3><span id="wire-log">Wire log</span><a href="#wire-log" class="header-anchor">#</a></h3><p>Apache http client会打印请求和响应的wire log，包含请求和响应的header和body，打印在debug级别。</p>
<p>Apache http client的日志都通过<code>org.apache.http.wire</code>这个logger打印，可以通过配置这个logger来控制wire log的打印。</p>
<p>注：Apache http client默认通过apache common logging来打印日志，可以通过配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>来使用slf4j来打印日志。</p>
]]></content>
  </entry>
  <entry>
    <title>线程锁导致的kafka客户端超时问题</title>
    <url>/%E7%BA%BF%E7%A8%8B%E9%94%81%E5%AF%BC%E8%87%B4%E7%9A%84kafka%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2><span id="wen-ti-bei-jing">问题背景</span><a href="#wen-ti-bei-jing" class="header-anchor">#</a></h2><p>有一个环境的kafka client发送数据有部分超时，拓扑图也非常简单</p>
<p><img src="/images/20230708/p1.png" alt="Untitled"></p>
<h2><span id="ding-wei-li-cheng">定位历程</span><a href="#ding-wei-li-cheng" class="header-anchor">#</a></h2><p>我们先对客户端的环境及JVM情况进行了排查，从JVM所在的虚拟机到kafka server的网络正常，垃圾回收（GC）时间也在预期范围内，没有出现异常。</p>
<p>紧接着，我们把目光转向了kafka 服务器，进行了一些基础的检查，同时也查看了kafka处理请求的超时日志，其中我们关心的metadata和produce请求都没有超时。</p>
<p>问题就此陷入了僵局，虽然也搜到了一些kafka server会对连上来的client反解导致超时的问题（ <a href="https://github.com/apache/kafka/pull/10059">https://github.com/apache/kafka/pull/10059</a>），但通过一些简单的分析，我们确定这并非是问题所在。</p>
<p>同时，我们在环境上也发现一些异常情况，当时觉得不是核心问题&#x2F;解释不通，没有深入去看</p>
<ul>
<li>问题JVM线程数较高，已经超过10000，这个线程数量虽然确实较高，但并不会对1个4U的容器产生什么实质性的影响。</li>
<li>负责指标上报的线程CPU较高，大约占用了1&#x2F;4 ~ 1&#x2F;2 的CPU核，这个对于4U的容器来看问题也不大</li>
</ul>
<p>当排查陷入僵局，我们开始考虑其他可能的调查手段。我们尝试抓包来找线索，这里的抓包是SASL鉴权+SSL加密的，非常难读，只能靠长度和响应时间勉强来推断报文的内容。</p>
<p>在这个过程中，我们发现了一个非常重要的线索，客户端竟然发起了超时断链，并且超时的那条消息，实际服务端是有响应回复的。</p>
<p>随后我们将kafka client的trace级别日志打开，这里不禁感叹kafka client日志打的相对较少，发现的确有<strong>log.debug(“Disconnecting from node {} due to request timeout.”, nodeId)</strong>;的日志打印。</p>
<p>与网络相关的流程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 这里发出了请求</span></span><br><span class="line">    client.send(request, time.milliseconds());</span><br><span class="line">    <span class="keyword">while</span> (client.active()) &#123;</span><br><span class="line">        List&lt;ClientResponse&gt; responses = client.poll(Long.MAX_VALUE, time.milliseconds());</span><br><span class="line">        <span class="keyword">for</span> (ClientResponse response : responses) &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.requestHeader().correlationId() == request.correlationId()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (response.wasDisconnected()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Connection to &quot;</span> + response.destination() + <span class="string">&quot; was disconnected before the response was read&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response.versionMismatch() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> response.versionMismatch();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Client was shutdown before response was read&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (DisconnectException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (client.active())</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Client was shutdown before response was read&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个poll方法，不是简单的poll方法，而在poll方法中会进行超时判断，查看poll方法中调用的handleTimedOutRequests方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ClientResponse&gt; <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">    ensureActive();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!abortedSends.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// If there are aborted sends because of unsupported version exceptions or disconnects,</span></span><br><span class="line">        <span class="comment">// handle them immediately without waiting for Selector#poll.</span></span><br><span class="line">        List&lt;ClientResponse&gt; responses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        handleAbortedSends(responses);</span><br><span class="line">        completeResponses(responses);</span><br><span class="line">        <span class="keyword">return</span> responses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">metadataTimeout</span> <span class="operator">=</span> metadataUpdater.maybeUpdate(now);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.selector.poll(Utils.min(timeout, metadataTimeout, defaultRequestTimeoutMs));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Unexpected error during I/O&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process completed actions</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">updatedNow</span> <span class="operator">=</span> <span class="built_in">this</span>.time.milliseconds();</span><br><span class="line">    List&lt;ClientResponse&gt; responses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    handleCompletedSends(responses, updatedNow);</span><br><span class="line">    handleCompletedReceives(responses, updatedNow);</span><br><span class="line">    handleDisconnections(responses, updatedNow);</span><br><span class="line">    handleConnections();</span><br><span class="line">    handleInitiateApiVersionRequests(updatedNow);</span><br><span class="line">    <span class="comment">// 关键的超时判断</span></span><br><span class="line">    handleTimedOutRequests(responses, updatedNow);</span><br><span class="line">    completeResponses(responses);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> responses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此我们推断，问题可能在于客户端hang住了一段时间，从而导致超时断链。我们通过工具Arthas深入跟踪了Kafka的相关代码，甚至发现一些简单的操作（如A.field）也需要数秒的时间。这进一步确认了我们的猜想：问题可能出在JVM。JVM可能在某个时刻出现问题，导致系统hang住，但这并非由GC引起。</p>
<p><img src="/images/20230708/p2.png" alt="Untitled"></p>
<p>为了解决这个问题，我们又检查了监控线程CPU较高的问题。我们发现线程的执行热点是从”sun.management.ThreadImpl”中的”getThreadInfo”方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;metrics-1@746&quot; prio=5 tid=0xf nid=NA runnable</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line">    at sun.management.ThreadImpl.getThreadInfo(Native Method)</span><br><span class="line">	  at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:185)</span><br><span class="line">	  at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:149)</span><br></pre></td></tr></table></figure>

<p>进一步发现，在某些版本的JDK8中，读取线程信息是需要加锁的。</p>
<p>至此，问题的根源已经清晰明了：过高的线程数以及线程监控时JVM全局锁的存在导致了这个问题。您可以使用如下的demo来复现这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadInfo;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadMXBean;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLockSimple</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">15_000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">200_000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        executorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;take &quot;</span> + <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="type">ThreadMXBean</span> <span class="variable">threadMXBean</span> <span class="operator">=</span> ManagementFactory.getThreadMXBean();</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">metricsService</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        metricsService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                ThreadInfo[] threadInfoList = threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds());</span><br><span class="line">                System.out.println(<span class="string">&quot;threads count &quot;</span> + threadInfoList.length + <span class="string">&quot; cost :&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了解决这个问题，我们有以下几个可能的方案：</p>
<ul>
<li>将不合理的线程数往下降，可能存在线程泄露的场景</li>
<li>升级jdk到jdk11或者jdk17（推荐）</li>
<li>将Thread相关的监控临时关闭</li>
</ul>
<p>这个问题的解决方案应根据实际情况进行选择，希望对你有所帮助。</p>
]]></content>
  </entry>
  <entry>
    <title>网络通信超时之后该不该重启客户端</title>
    <url>/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E8%B6%85%E6%97%B6%E4%B9%8B%E5%90%8E%E8%AF%A5%E4%B8%8D%E8%AF%A5%E9%87%8D%E5%90%AF%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<p>我写这篇文章来论证“超时之后要不要重启客户端”、“如何重启客户端”。简而言之，重启客户端还是为了让系统能够达到自愈，是比较高的可靠性要求。如果你的软件没有这么高的可靠性要求，像是人机交互程序等对可靠性要求较低的场景，可以选择不考虑这个功能。毕竟实现这个功能的时间至少够300倍你重新点击按钮&#x2F;重启的时间了。</p>
<p>如果是一些串口协议，通过传输的间隙来判断报文的间隔，比如modbus协议，3.5个时间内不发送，就计算做一个协议报文的开始，那么故障时的报文毫无疑问会处理失败（因为存在CRC校验，奇偶校验等）。等待故障结束，又3.5个时间后，就会恢复正常。</p>
<p>如果能确保网络通信报文不会遭到篡改、也没有宇宙射线&#x2F;太阳黑子修改你的比特位的场景下，笔者认为没有特别大的必要对客户端进行重启操作，因为不见得重启后就比之前更好，这种超时通常是由服务端处理时间长导致的。没做到建链限制的情况下，贸然重启，还可能会引起建链的波峰。</p>
<p>但是，在实际复杂的网络环境下，如<strong>网络报文遭到篡改</strong>、<strong>部分字节丢失</strong>等的情况下，一切就大不一样了，不重启客户端就无法自愈。这其中的关键在于，切分报文是否正确。</p>
<p>比如基于TCP的网络协议，这也是本文重点讨论的场景，假设应用协议采用最常见的LengthBasedFrame分包方式，这种协议，通常根据前0~4个字节来判断协议的总长度，比如前面的字节是<strong>00000014</strong>，那这个报文长度就是<code>1*16 + 4 = 20</code>长度。这种时候，一旦发生了报文篡改&#x2F;丢包，会导致通信端计算报文长度出错，一直在傻等，无法自愈。</p>
<p>比如上面的例子一旦发生篡改，将4篡改5，那么就会导致客户端&#x2F;服务器一直在等待不存在的第21个字节，这种情况下，如果不做超时重建，那么这条链路就会一直处于等待状态，无法自愈。</p>
<p>综上所述，实际复杂的网络环境下出现通信超时，这条链路可能会无法自愈。这种情况下，笔者推荐对针对tcp链路做超时重建，业内的一些例子像是：bookkeeper client没有做，kafka client做了。至于重建的触发条件，比如一次超时就重建、多次超时之后才重建、仅当心跳报文超时才重建，这些就交给读者自己把握了。如果区别不大，笔者倾向于一次超时就重建，逻辑简单清晰。</p>
]]></content>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>文件编解码代码设计</title>
    <url>/code/file-codec-design/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#gai-shu">概述</a></li>
<li><a href="#java">Java</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="gai-shu">概述</span><a href="#gai-shu" class="header-anchor">#</a></h1><p>我们以xyz文件格式为例，来说明文件编解码的代码设计。xyz文件格式内容如下：</p>
<ul>
<li>header部分：文件头，包含文件版本号、文件类型、文件大小等信息</li>
<li>body部分：文件主体</li>
</ul>
<p>通用设计大概如下</p>
<pre class="mermaid">classDiagram
    class XyzHeader {
        + byte[] content
    }
    class XyzBody {
        + byte[] content
    }
    class Xyz{
        + XyzHeader header
        + XyzBody body
    }
    class XyzReader {
        + Xyz read(fileName: string)
        + void process(String fileName, XyzProcessor processor)
        - XyzHeader readHeader()
        - XyzBody readBody()
    }
    class XyzProcessor {
        <<interface>>
        + void processHeader(XyzHeader header)
        + void processBody(XyzBody body)
    }
    class XyzReadCollectProcessor {
        Xyz getXyz()
    }
    Xyz --> XyzHeader: contains
    Xyz --> XyzBody: contains
    XyzReader --> Xyz: reads
    XyzReader --> XyzProcessor: processes
    XyzReadCollectProcessor --|> XyzProcessor: implements</interface></pre>

<h1><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h1><p>使用<code>java.io.RandomAccessFile</code>和<code>java.nio.channels.FileChannel</code>来实现文件读取，使用<code>io.netty.buffer.ByteBuf</code>来读写文件。</p>
<p>核心代码举例:</p>
<p>XyzReader:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XyzHeader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XyzBody</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Xyz</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> XyzHeader header;</span><br><span class="line">    <span class="keyword">private</span> XyzBody body;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">XyzProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processHeader</span><span class="params">(XyzHeader header)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processBody</span><span class="params">(XyzBody body)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XyzReadCollectProcessor</span> <span class="keyword">implements</span> <span class="title class_">XyzProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Xyz</span> <span class="variable">xyz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Xyz</span>();</span><br><span class="line">    <span class="keyword">public</span> Xyz <span class="title function_">getXyz</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xyz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XyzReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Xyz <span class="title function_">read</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XyzHeader <span class="title function_">readHeader</span><span class="params">(FileChannel fileChannel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XyzBody <span class="title function_">readBody</span><span class="params">(FileChannel fileChannel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Codec</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Actions 参考大全</title>
    <url>/code/github-actions-reference/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#tong-yong-github-actions">通用 GitHub Actions</a><ul>
<li><a href="#commit-lint">commit lint</a></li>
<li><a href="#line-lint">line lint</a></li>
</ul>
</li>
<li><a href="#go">Go</a><ul>
<li><a href="#golangci-lint">golangci-lint</a></li>
<li><a href="#go-mod-check">go mod check</a></li>
<li><a href="#go-unit-tests">go unit tests</a></li>
</ul>
</li>
<li><a href="#java-github-actions">Java GitHub Actions</a><ul>
<li><a href="#maven-checkstyle">maven checkstyle</a></li>
<li><a href="#maven-spotbugs">maven spotbugs</a></li>
<li><a href="#maven-unit-tests">maven unit tests</a></li>
</ul>
</li>
<li><a href="#typescript-github-actions">TypeScript GitHub Actions</a><ul>
<li><a href="#npm-build-test">npm build test</a></li>
<li><a href="#prettier">prettier</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="tong-yong-github-actions">通用 GitHub Actions</span><a href="#tong-yong-github-actions" class="header-anchor">#</a></h1><h2><span id="commit-lint">commit lint</span><a href="#commit-lint" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">commit</span> <span class="string">lint</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">commitlint:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">wagoid/commitlint-github-action@v5</span></span><br></pre></td></tr></table></figure>

<h2><span id="line-lint">line lint</span><a href="#line-lint" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">line</span> <span class="string">lint</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">line</span> <span class="string">lint</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">linelint</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">fernandrone/linelint@master</span></span><br></pre></td></tr></table></figure>

<h1><span id="go">Go</span><a href="#go" class="header-anchor">#</a></h1><h2><span id="golangci-lint">golangci-lint</span><a href="#golangci-lint" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">go</span> <span class="string">ci</span> <span class="string">Lint</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">golangci:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lint</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-go@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">go-version:</span> <span class="string">&#x27;1.21&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">golangci-lint</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">golangci/golangci-lint-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">latest</span></span><br><span class="line">          <span class="attr">args:</span> <span class="string">--timeout</span> <span class="string">3m0s</span></span><br></pre></td></tr></table></figure>

<h2><span id="go-mod-check">go mod check</span><a href="#go-mod-check" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">go</span> <span class="string">mod</span> <span class="string">check</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">go_mod_check:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Go</span> <span class="string">Mod</span> <span class="string">Check</span> <span class="string">Action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">Shoothzj/go-mod-check-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">prohibitIndirectDepUpdate:</span> <span class="string">&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>

<h2><span id="go-unit-tests">go unit tests</span><a href="#go-unit-tests" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">go</span> <span class="string">unit</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">go_unit_test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-go@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">go-version:</span> <span class="string">&#x27;1.21&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">OpenGemini</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">shoothzj/setup-opengemini-action@main</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">coverage</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">go</span> <span class="string">test</span> <span class="string">./...</span> <span class="string">-coverpkg=./padmin/...</span> <span class="string">-race</span> <span class="string">-coverprofile=coverage.out</span> <span class="string">-covermode=atomic</span></span><br></pre></td></tr></table></figure>

<h1><span id="java-github-actions">Java GitHub Actions</span><a href="#java-github-actions" class="header-anchor">#</a></h1><h2><span id="maven-checkstyle">maven checkstyle</span><a href="#maven-checkstyle" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">java</span> <span class="string">checkstyle</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">java_checkstyle:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Maven</span> <span class="string">Central</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkstyle</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">clean</span> <span class="string">checkstyle:check</span></span><br></pre></td></tr></table></figure>

<h2><span id="maven-spotbugs">maven spotbugs</span><a href="#maven-spotbugs" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">java</span> <span class="string">spotbugs</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">java_spotbugs:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Maven</span> <span class="string">Central</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">spotbugs</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">-DskipTests</span> <span class="string">clean</span> <span class="string">verify</span> <span class="string">spotbugs:spotbugs</span></span><br></pre></td></tr></table></figure>

<h2><span id="maven-unit-tests">maven unit tests</span><a href="#maven-unit-tests" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">java</span> <span class="string">unit</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">java_unit_tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Maven</span> <span class="string">Central</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">unit</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">clean</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h1><span id="typescript-github-actions">TypeScript GitHub Actions</span><a href="#typescript-github-actions" class="header-anchor">#</a></h1><h2><span id="npm-build-test">npm build test</span><a href="#npm-build-test" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">npm</span> <span class="string">build</span> <span class="string">test</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">npm_buid_test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">latest</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">pulsar</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">shoothzj/setup-pulsar-action@main</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h2><span id="prettier">prettier</span><a href="#prettier" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">prettier</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">prettier:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">latest</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--save-dev</span> <span class="string">prettier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--global</span> <span class="string">prettier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">prettier</span> <span class="string">--check</span> <span class="string">&#x27;**/*.ts&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>GitHub Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言SDK设计</title>
    <url>/code/multi-lang-client-sdk-design/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#duo-yu-yan-sdk-she-ji-de-chang-jian-wen-ti">多语言SDK设计的常见问题</a><ul>
<li><a href="#ri-zhi-da-yin-de-she-ji-ce-lue">日志打印的设计策略</a></li>
<li><a href="#shi-fou-xu-yao-shi-yong-xian-shi-de-start-connect-fang-fa">是否需要使用显式的<code>start</code>&#x2F;<code>connect</code>方法？</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="duo-yu-yan-sdk-she-ji-de-chang-jian-wen-ti">多语言SDK设计的常见问题</span><a href="#duo-yu-yan-sdk-she-ji-de-chang-jian-wen-ti" class="header-anchor">#</a></h1><h2><span id="ri-zhi-da-yin-de-she-ji-ce-lue">日志打印的设计策略</span><a href="#ri-zhi-da-yin-de-she-ji-ce-lue" class="header-anchor">#</a></h2><p>在SDK的关键节点，比如初始化完成、连接建立或者连接断开，都可以打印日志。如果是PerRequest的日志，一般默认不会打印INFO级别的日志。</p>
<p>SDK应该避免仅仅打印错误日志然后忽略异常；相反，它应该提供机制让调用者能够捕获并处理异常信息。这种做法有助于保持错误处理的透明性，并允许调用者根据需要采取适当的响应措施。正如<strong>David J. Wheeler</strong>所说”Put the control in the hands of those who know how to handle the information, not those who know how to manage the computers, because encapsulated details will eventually leak out.”把控制权放到那些知道如何处理信息的人手中，而不是放在那些知道如何管理计算机的人手中，因为封装的细节最终都会暴露。</p>
<h2><span id="shi-fou-xu-yao-shi-yong-xian-shi-de-start-x2f-connect-fang-fa">是否需要使用显式的<code>start</code>&#x2F;<code>connect</code>方法？</span><a href="#shi-fou-xu-yao-shi-yong-xian-shi-de-start-x2f-connect-fang-fa" class="header-anchor">#</a></h2><p>像go这样的语言，一般来说不太在意特定的时间内，某个协程是否处于阻塞等待连接的状态。而在java这样的语言，特别是在采用响应式编程模型的场景下，通常需要通过异步操作来管理连接的建立。这可以通过显式的start&#x2F;connect方法来或者是异步的工厂方法来实现。</p>
]]></content>
      <tags>
        <tag>Code</tag>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言编程 各大Http库配置指南</title>
    <url>/code/multi-lang-http-client-config/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#go">Go</a><ul>
<li><a href="#go-biao-zhun-ku">Go标准库</a><ul>
<li><a href="#timeout">timeout</a></li>
<li><a href="#connection-timeout">connection timeout</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="go">Go</span><a href="#go" class="header-anchor">#</a></h1><h2><span id="go-biao-zhun-ku">Go标准库</span><a href="#go-biao-zhun-ku" class="header-anchor">#</a></h2><h3><span id="timeout">timeout</span><a href="#timeout" class="header-anchor">#</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">client := http.Client&#123;</span><br><span class="line">    Timeout: timeout,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="connection-timeout">connection timeout</span><a href="#connection-timeout" class="header-anchor">#</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">client := http.Client&#123;</span><br><span class="line">    Transport: &amp;http.Transport&#123;</span><br><span class="line">        Dial: (&amp;net.Dialer&#123;</span><br><span class="line">            Timeout: timeout,</span><br><span class="line">        &#125;).Dial,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言编程 TLS配置参数设计</title>
    <url>/code/multi-lang-paradigm-tls-config-design/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#bei-jing">背景</a></li>
<li><a href="#tong-yong-can-shu">通用参数</a></li>
<li><a href="#go">Go</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#kotlin">Kotlin</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#rust">Rust</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h1><p>TLS(Transport Layer Security)是一种安全协议，用于在两个通信应用程序之间提供保密性和数据完整性。TLS是SSL(Secure Sockets Layer)的继任者。</p>
<p>不同的编程语言处理TLS配置的方式各有千秋, 本文针对TLS配置参数的设计进行探讨。</p>
<p>代码配置中，建议使用反映状态的参数名。</p>
<h1><span id="tong-yong-can-shu">通用参数</span><a href="#tong-yong-can-shu" class="header-anchor">#</a></h1><ul>
<li>tlsEnable: 是否启用TLS</li>
</ul>
<h1><span id="go">Go</span><a href="#go" class="header-anchor">#</a></h1><p>推荐使用方式一</p>
<p>方式一：</p>
<ul>
<li>tlsConfig *tls.Config: Go标准库的内置TLS结构体</li>
</ul>
<p>方式二：</p>
<p>由于Go不支持加密的私钥文件，推荐使用文件内容，而不是文件路径，避免敏感信息泄露。</p>
<ul>
<li>tlsCertContent []byte: 证书文件内容</li>
<li>tlsPrivateKeyContent []byte: 私钥文件内容</li>
<li>tlsMinVersion uint16: TLS最低版本</li>
<li>tlsMaxVersion uint16: TLS最高版本</li>
<li>tlsCipherSuites []uint16: TLS加密套件列表</li>
</ul>
<h1><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h1><p>Java的TLS参数基本上都是基于keystore和truststore来配置的。一般常见设计如下参数：</p>
<ul>
<li>keyStorePath: keystore文件路径</li>
<li>keyStorePassword: keystore密码</li>
<li>trustStorePath: truststore文件路径</li>
<li>trustStorePassword: truststore密码</li>
<li>tlsVerificationDisabled: 是否禁用TLS校验</li>
<li>tlsHostnameVerificationDisabled: 是否禁用TLS主机名校验，仅部分框架支持。</li>
<li>tlsVersions: TLS版本列表</li>
<li>tlsCipherSuites: TLS加密套件列表</li>
</ul>
<h1><span id="kotlin">Kotlin</span><a href="#kotlin" class="header-anchor">#</a></h1><p>kotlin的Tls与Java相同：</p>
<ul>
<li>keyStorePath: keystore文件路径</li>
<li>keyStorePassword: keystore密码</li>
<li>trustStorePath: truststore文件路径</li>
<li>trustStorePassword: truststore密码</li>
<li>tlsVerificationDisabled: 是否禁用TLS校验</li>
<li>tlsHostnameVerificationDisabled: 是否禁用TLS主机名校验，仅部分框架支持。</li>
<li>tlsVersions: TLS版本列表</li>
<li>tlsCipherSuites: TLS加密套件列表</li>
</ul>
<h1><span id="python">Python</span><a href="#python" class="header-anchor">#</a></h1><p>推荐使用方式一</p>
<p>方式一</p>
<ul>
<li>tlsContext: Python标准库的内置TLS结构体</li>
</ul>
<p>方式二</p>
<p>Python可以使用文件路径以及加密的私钥文件。</p>
<ul>
<li>tlsCertPath: 证书文件路径</li>
<li>tlsPrivateKeyPath: 私钥文件路径</li>
<li>tlsPrivateKeyPassword: 私钥密码</li>
<li>tlsMinVersion: TLS最低版本</li>
<li>tlsMaxVersion: TLS最高版本</li>
<li>tlsCipherSuites: TLS加密套件列表</li>
</ul>
<h1><span id="rust">Rust</span><a href="#rust" class="header-anchor">#</a></h1><p>由于常见的Rust TLS实现不支持加密的私钥文件，推荐使用文件内容，而不是文件路径，避免敏感信息泄露。 一般常见如下设计参数:</p>
<ul>
<li>tls_cert_content Vec<u8>: 证书内容</u8></li>
<li>tsl_private_key_content Vec<u8>: 私钥内容</u8></li>
<li>tls_versions: TLS版本列表</li>
<li>tls_cipher_suites: TLS加密套件列表</li>
<li>tls_verification_disabled: 是否禁用TLS校验</li>
</ul>
]]></content>
      <tags>
        <tag>Code</tag>
        <tag>多语言编程</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言编程 返回多个不同类型的方法样例</title>
    <url>/code/multi-lang-return-obj-example/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#bei-jing">背景</a></li>
<li><a href="#c">C</a></li>
<li><a href="#c">C++</a></li>
<li><a href="#go">Go</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">Javascript</a></li>
<li><a href="#kotlin">Kotlin</a><ul>
<li><a href="#shi-yong-any-lei-xing">使用Any类型</a></li>
<li><a href="#shi-yong-sealedclass">使用SealedClass</a></li>
</ul>
</li>
<li><a href="#python">Python</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#typescript">TypeScript</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h1><p>你可能会在一些场景下碰到需要返回多个不同类型的方法。比如协议解析读取报文时，更具体地像kubernetes在开始解析Yaml的时候，怎么知道这个类型是属于Deployment还是Service？</p>
<h1><span id="c">C</span><a href="#c" class="header-anchor">#</a></h1><p>C语言通常通过使用Struct（结构体）和Union（联合体）的方式来实现这个功能，如下文例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    MONKEY,</span><br><span class="line">    COW,</span><br><span class="line">    UNKNOWN</span><br><span class="line">&#125; AnimalType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* description;</span><br><span class="line">&#125; Monkey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* description;</span><br><span class="line">&#125; Cow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    AnimalType type;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        Monkey monkey;</span><br><span class="line">        Cow cow;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; Animal;</span><br><span class="line"></span><br><span class="line">Animal <span class="title function_">createAnimal</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* animalType)</span> &#123;</span><br><span class="line">    Animal animal;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(animalType, <span class="string">&quot;Monkey&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        animal.type = MONKEY;</span><br><span class="line">        animal.monkey.description = <span class="string">&quot;I am a monkey!&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(animalType, <span class="string">&quot;Cow&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        animal.type = COW;</span><br><span class="line">        animal.cow.description = <span class="string">&quot;I am a cow!&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        animal.type = UNKNOWN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Animal animal1 = createAnimal(<span class="string">&quot;Monkey&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal1.type == MONKEY) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, animal1.monkey.description);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Animal animal2 = createAnimal(<span class="string">&quot;Cow&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal2.type == COW) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, animal2.cow.description);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Animal animal3 = createAnimal(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal3.type == UNKNOWN) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown animal type\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="c">C++</span><a href="#c" class="header-anchor">#</a></h1><p>在C++中，我们可以使用基类指针来指向派生类的对象。可以使用动态类型识别（RTTI）来在运行时确定对象的类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">toString</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">toString</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a monkey!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">toString</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a cow!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Animal* <span class="title">createAnimal</span><span class="params">(<span class="type">const</span> std::string&amp; animalType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (animalType == <span class="string">&quot;Monkey&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Monkey</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (animalType == <span class="string">&quot;Cow&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Cow</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Unknown animal type: &quot;</span> + animalType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Animal* animal1 = <span class="built_in">createAnimal</span>(<span class="string">&quot;Monkey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Monkey* monkey = <span class="built_in">dynamic_cast</span>&lt;Monkey*&gt;(animal1)) &#123;</span><br><span class="line">            std::cout &lt;&lt; monkey-&gt;<span class="built_in">toString</span>() &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> animal1;</span><br><span class="line"></span><br><span class="line">        Animal* animal2 = <span class="built_in">createAnimal</span>(<span class="string">&quot;Cow&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Cow* cow = <span class="built_in">dynamic_cast</span>&lt;Cow*&gt;(animal2)) &#123;</span><br><span class="line">            std::cout &lt;&lt; cow-&gt;<span class="built_in">toString</span>() &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> animal2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> std::runtime_error&amp; e) &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="go">Go</span><a href="#go" class="header-anchor">#</a></h1><p>Go的常见处理方式，是返回一个接口或者**interface{}**类型。调用者使用Go语言类型断言来检查具体的类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">	String() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monkey <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monkey)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;I am a monkey!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cow <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cow)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;I am a cow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createAnimal</span><span class="params">(typeName <span class="type">string</span>)</span></span> (Animal, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">switch</span> typeName &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;Monkey&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> Monkey&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;Cow&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> Cow&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;Unknown animal type: %s&quot;</span>, typeName)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	animal1, err := createAnimal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> monkey, ok := animal1.(Monkey); ok &#123;</span><br><span class="line">		fmt.Println(monkey)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	animal2, err := createAnimal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> cow, ok := animal2.(Cow); ok &#123;</span><br><span class="line">		fmt.Println(cow)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h1><p>Java语言的常见处理方式，是返回Object类型或者一个基础类型。然后由调用方在进行instance of判断。或者Java17之后，可以使用模式匹配的方式来简化转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiTypeReturnExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Monkey</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I am a monkey!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Cow</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I am a cow!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createAnimal</span><span class="params">(String type)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Monkey&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Cow&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cow</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown animal type: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">animal1</span> <span class="operator">=</span> createAnimal(<span class="string">&quot;Monkey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// java8 写法，后面如果明确用做精确的类型，需要强制转换</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (animal1 <span class="keyword">instanceof</span> Monkey) &#123;</span><br><span class="line">            System.out.println(animal1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">animal2</span> <span class="operator">=</span> createAnimal(<span class="string">&quot;Cow&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (animal2 <span class="keyword">instanceof</span> Cow) &#123;</span><br><span class="line">            System.out.println(animal2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// java17 写法，不需要强制转换</span></span><br><span class="line">        <span class="keyword">if</span> (createAnimal(<span class="string">&quot;Monkey&quot;</span>) <span class="keyword">instanceof</span> Monkey animal3) &#123;</span><br><span class="line">            System.out.println(animal3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (createAnimal(<span class="string">&quot;Cow&quot;</span>) <span class="keyword">instanceof</span> Cow animal4) &#123;</span><br><span class="line">            System.out.println(animal4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="javascript">Javascript</span><a href="#javascript" class="header-anchor">#</a></h1><p>动态类型语言，使用instanceof运算符判断</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am an animal&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am a monkey&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am a cow&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnimal</span>(<span class="params">animalType</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (animalType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Monkey&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Cow&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cow</span>();</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Unknown animal type: <span class="subst">$&#123;animalType&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> animal1 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Monkey&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal1 <span class="keyword">instanceof</span> <span class="title class_">Monkey</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(animal1.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> animal2 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Cow&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal2 <span class="keyword">instanceof</span> <span class="title class_">Cow</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(animal2.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> animal3 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Dog&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="kotlin">Kotlin</span><a href="#kotlin" class="header-anchor">#</a></h1><p>Kotlin可以使用Sealed Class(密封类)和Any类型两种方式。使用Any的场景，与Java返回Object类似。Sealed Class更加安全、更方便一些。</p>
<h2><span id="shi-yong-any-lei-xing">使用Any类型</span><a href="#shi-yong-any-lei-xing" class="header-anchor">#</a></h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span>: <span class="type">Animal</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a monkey!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span>: <span class="type">Animal</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a cow!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createAnimal</span><span class="params">(type: <span class="type">String</span>)</span></span>: Any &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (type) &#123;</span><br><span class="line">        <span class="string">&quot;Monkey&quot;</span> -&gt; Monkey()</span><br><span class="line">        <span class="string">&quot;Cow&quot;</span> -&gt; Cow()</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Unknown animal type: <span class="variable">$type</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> animal1 = createAnimal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">    <span class="keyword">when</span> (animal1) &#123;</span><br><span class="line">        <span class="keyword">is</span> Monkey -&gt; println(animal1)</span><br><span class="line">        <span class="keyword">is</span> Cow -&gt; println(animal1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> animal2 = createAnimal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">    <span class="keyword">when</span> (animal2) &#123;</span><br><span class="line">        <span class="keyword">is</span> Monkey -&gt; println(animal2)</span><br><span class="line">        <span class="keyword">is</span> Cow -&gt; println(animal2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="shi-yong-sealedclass">使用SealedClass</span><a href="#shi-yong-sealedclass" class="header-anchor">#</a></h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Monkey</span>(<span class="keyword">val</span> info: String = <span class="string">&quot;I am a monkey!&quot;</span>) : Animal()</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Cow</span>(<span class="keyword">val</span> info: String = <span class="string">&quot;I am a cow!&quot;</span>) : Animal()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createAnimal</span><span class="params">(type: <span class="type">String</span>)</span></span>: Animal &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (type) &#123;</span><br><span class="line">        <span class="string">&quot;Monkey&quot;</span> -&gt; Animal.Monkey()</span><br><span class="line">        <span class="string">&quot;Cow&quot;</span> -&gt; Animal.Cow()</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Unknown animal type: <span class="variable">$type</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> animal1 = createAnimal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">    <span class="keyword">when</span> (animal1) &#123;</span><br><span class="line">        <span class="keyword">is</span> Animal.Monkey -&gt; println(animal1.info)</span><br><span class="line">        <span class="keyword">is</span> Animal.Cow -&gt; println(animal1.info)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> animal2 = createAnimal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">    <span class="keyword">when</span> (animal2) &#123;</span><br><span class="line">        <span class="keyword">is</span> Animal.Monkey -&gt; println(animal2.info)</span><br><span class="line">        <span class="keyword">is</span> Animal.Cow -&gt; println(animal2.info)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="python">Python</span><a href="#python" class="header-anchor">#</a></h1><p>Python是动态类型的语言，可以简单基于一些条件返回不同类型的对象，然后在接收到返回值之后使用type()函数或isinstance()函数来确定其类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am an animal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a monkey&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a cow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_animal</span>(<span class="params">animal_type</span>):</span><br><span class="line">    <span class="keyword">if</span> animal_type == <span class="string">&quot;Monkey&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Monkey()</span><br><span class="line">    <span class="keyword">elif</span> animal_type == <span class="string">&quot;Cow&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Cow()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown animal type: <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    animal1 = create_animal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(animal1, Monkey):</span><br><span class="line">        <span class="built_in">print</span>(animal1)</span><br><span class="line"></span><br><span class="line">    animal2 = create_animal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(animal2, Cow):</span><br><span class="line">        <span class="built_in">print</span>(animal2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h1><span id="ruby">Ruby</span><a href="#ruby" class="header-anchor">#</a></h1><p>Ruby也较为简单，在方法内部直接返回不同类型的对象。然后，可以使用<strong>is_a</strong>方法或<strong>class</strong>方法来确定返回对象的实际类型。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">to_s</span></span><br><span class="line">    <span class="string">&quot;I am an animal&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">to_s</span></span><br><span class="line">    <span class="string">&quot;I am a monkey&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">to_s</span></span><br><span class="line">    <span class="string">&quot;I am a cow&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_animal</span>(<span class="params">animal_type</span>)</span><br><span class="line">  <span class="keyword">case</span> animal_type</span><br><span class="line">  <span class="keyword">when</span> <span class="string">&quot;Monkey&quot;</span></span><br><span class="line">    <span class="title class_">Monkey</span>.new</span><br><span class="line">  <span class="keyword">when</span> <span class="string">&quot;Cow&quot;</span></span><br><span class="line">    <span class="title class_">Cow</span>.new</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">raise</span> <span class="string">&quot;Unknown animal type: <span class="subst">#&#123;animal_type&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  animal1 = create_animal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> animal1.is_a? <span class="title class_">Monkey</span></span><br><span class="line">    puts animal1</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  animal2 = create_animal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> animal2.is_a? <span class="title class_">Cow</span></span><br><span class="line">    puts animal2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h1><span id="rust">Rust</span><a href="#rust" class="header-anchor">#</a></h1><p>在Rust中，可以使用enum（枚举）来创建一个持有多种不同类型的数据结构。然后使用match语句来做模式匹配。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    Monkey,</span><br><span class="line">    Cow,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter&lt;<span class="symbol">&#x27;_</span>&gt;) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            Animal::Monkey =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;I am a monkey!&quot;</span>),</span><br><span class="line">            Animal::Cow =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;I am a cow!&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">create_animal</span>(animal_type: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Animal, <span class="type">String</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> animal_type &#123;</span><br><span class="line">        <span class="string">&quot;Monkey&quot;</span> =&gt; <span class="title function_ invoke__">Ok</span>(Animal::Monkey),</span><br><span class="line">        <span class="string">&quot;Cow&quot;</span> =&gt; <span class="title function_ invoke__">Ok</span>(Animal::Cow),</span><br><span class="line">        _ =&gt; <span class="title function_ invoke__">Err</span>(<span class="built_in">format!</span>(<span class="string">&quot;Unknown animal type: &#123;&#125;&quot;</span>, animal_type)),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">create_animal</span>(<span class="string">&quot;Monkey&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(animal) =&gt; <span class="keyword">match</span> animal &#123;</span><br><span class="line">            Animal::Monkey =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, animal),</span><br><span class="line">            _ =&gt; (),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">create_animal</span>(<span class="string">&quot;Cow&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(animal) =&gt; <span class="keyword">match</span> animal &#123;</span><br><span class="line">            Animal::Cow =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, animal),</span><br><span class="line">            _ =&gt; (),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">create_animal</span>(<span class="string">&quot;Dog&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(_) =&gt; (),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="scala">Scala</span><a href="#scala" class="header-anchor">#</a></h1><p>scala中，可以使用sealed trait和case class来创建一个能够返回多种不同类型的方法。Sealed trait可以定义一个有限的子类集合，可以确保类型安全</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">info</span></span>: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Monkey</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> info: <span class="type">String</span> = <span class="string">&quot;I am a monkey!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Cow</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> info: <span class="type">String</span> = <span class="string">&quot;I am a cow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MultiTypeReturnExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createAnimal</span></span>(animalType: <span class="type">String</span>): <span class="type">Animal</span> = &#123;</span><br><span class="line">    animalType <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Monkey&quot;</span> =&gt; <span class="type">Monkey</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Cow&quot;</span> =&gt; <span class="type">Cow</span>()</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">s&quot;Unknown animal type: <span class="subst">$animalType</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> animal1 = createAnimal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">      animal1 <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Monkey</span>() =&gt; println(animal1.info)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> animal2 = createAnimal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">      animal2 <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Cow</span>() =&gt; println(animal2.info)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e: <span class="type">IllegalArgumentException</span> =&gt; println(e.getMessage)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="typescript">TypeScript</span><a href="#typescript" class="header-anchor">#</a></h1><p>总得来说，和javascript区别不大</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">toString</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">toString</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I am a monkey&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">toString</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I am a cow&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnimal</span>(<span class="params">animalType: <span class="built_in">string</span></span>): <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (animalType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Monkey&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Cow&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cow</span>();</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Unknown animal type: <span class="subst">$&#123;animalType&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> animal1 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Monkey&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (animal1 <span class="keyword">instanceof</span> <span class="title class_">Monkey</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(animal1.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> animal2 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Cow&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (animal2 <span class="keyword">instanceof</span> <span class="title class_">Cow</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(animal2.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> animal3 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Dog&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Code</tag>
        <tag>多语言编程</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes容器获取IP地址</title>
    <url>/kubernetes/kubernetes-container-get-ip/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#kubernetes-huan-jing-bian-liang-zhu-ru">kubernetes环境变量注入</a></li>
<li><a href="#tong-guo-shell-jiao-ben-huo-qu">通过shell脚本获取</a><ul>
<li><a href="#tong-guo-ip-ming-ling-tui-jian">通过ip命令（推荐）</a></li>
<li><a href="#tong-guo-ifconfig-ming-ling-bu-tui-jian">通过ifconfig命令（不推荐）</a></li>
</ul>
</li>
<li><a href="#tldr">TLDR</a></li>
</ul>
<!-- tocstop -->

</div>

<p>kubernetes中容器获取IP地址是一个常见的需求，常见的有两种获取IP地址的方式</p>
<h2><span id="kubernetes-huan-jing-bian-liang-zhu-ru">kubernetes环境变量注入</span><a href="#kubernetes-huan-jing-bian-liang-zhu-ru" class="header-anchor">#</a></h2><p>通过在部署时，<strong>container</strong>下的<strong>env</strong>中配置如下yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br></pre></td></tr></table></figure>

<p>进入容器就可以根据环境变量获取到容器IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo $POD_IP</span><br><span class="line">172.17.0.2</span><br></pre></td></tr></table></figure>

<h2><span id="tong-guo-shell-jiao-ben-huo-qu">通过shell脚本获取</span><a href="#tong-guo-shell-jiao-ben-huo-qu" class="header-anchor">#</a></h2><h3><span id="tong-guo-ip-ming-ling-tui-jian">通过ip命令（推荐）</span><a href="#tong-guo-ip-ming-ling-tui-jian" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip addr show eth0 | grep &quot;inet\b&quot; | awk &#x27;&#123;print $2&#125;&#x27; | cut -d/ -f1</span></span><br><span class="line">172.17.0.2</span><br></pre></td></tr></table></figure>

<p>注意这里一定要用<strong>inet\b</strong>，不要用<strong>inet</strong>。使用<strong>inet</strong>的话，在Ipv6双栈场景下会因为匹配到<strong>inet6</strong>获取到错误的结果, Ipv6双栈场景下ip命令的部分输出结果如下图所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">inet6 fe80::ffff prefixlen 64 scopeid 0x20&lt;lin&gt;</span><br></pre></td></tr></table></figure>

<h3><span id="tong-guo-ifconfig-ming-ling-bu-tui-jian">通过ifconfig命令（不推荐）</span><a href="#tong-guo-ifconfig-ming-ling-bu-tui-jian" class="header-anchor">#</a></h3><p>不推荐使用ifconfig命令的原因是，这个命令已经废弃，将会逐步删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 | grep <span class="string">&#x27;inet\b&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">cut</span> -d/ -f1</span><br></pre></td></tr></table></figure>

<p>同样需要使用<strong>inet\b</strong>，不要使用<strong>inet</strong></p>
<h2><span id="tldr">TLDR</span><a href="#tldr" class="header-anchor">#</a></h2><p>优先配置如下yaml进行环境变量注入，其次使用<strong>ip addr show eth0 | grep “inet\b” | awk ‘{print $2}’ | cut -d&#x2F; -f1</strong>命令获取</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>修改运行中kubernetes集群中etcd的参数</title>
    <url>/kubernetes/kubernetes-etcd-config-modify/</url>
    <content><![CDATA[<p>在一些场景下，您的kubernetes集群已经搭建完成了，但是还需要修改一些核心组件的参数，如etcd、kube-apiserver、kube-scheduler、kube-controller-manager等。</p>
<p>通过<code>kubectl get pod -owide -n kube-system</code> 可以查看到这些核心容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME                               READY   STATUS    RESTARTS       AGE</span><br><span class="line">coredns-78fcd69978-rdmjm           1/1     Running   11 (23s ago)   281d</span><br><span class="line">etcd-<span class="variable">$NODE1</span>                        1/1     Running   13 (23s ago)   281d</span><br><span class="line">etcd-<span class="variable">$NODE2</span>                        1/1     Running   13 (23s ago)   281d</span><br><span class="line">etcd-<span class="variable">$NODE3</span>                        1/1     Running   13 (23s ago)   281d</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<p>以etcd为例，etcd的参数就在pod中的commands参数里。可以通过<code>kubectl describe pod etcd-$NODENAME -n kube-system</code>来查看(省略部分参数)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Name: etcd-<span class="variable">$NODENAME</span></span><br><span class="line">Namespace: kube-system</span><br><span class="line">Containers:</span><br><span class="line">etcd:</span><br><span class="line">Command:</span><br><span class="line">--client-cert-auth=<span class="literal">true</span></span><br><span class="line">--trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br></pre></td></tr></table></figure>

<p>然而，如果您尝试编辑pod中的参数，会发现它们是不可修改的。</p>
<p>不过，如果您需要修改参数，还有另一个办法，通过修改<code>/etc/kubernetes/manifests/</code>下的yaml文件来修改运行中kubernetes集群中”系统”Pod的参数。原理是，当您把yaml文件修改后，kubelet会自动监听yaml文件的变更，并重新拉起本机器上的pod。</p>
<p>举个例子，如果您希望关闭etcd集群对客户端的认证，那么您可以修改<code>/etc/kubernetes/mainfiest/etcd.yaml</code>,将<strong>client-cert-auth</strong>设置为false，把<strong>trusted-ca-file</strong>去掉。注意：三台master机器节点都需要执行此操作</p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>opengemini client sdk 设计</title>
    <url>/opengemini/opengemini-sdk-design/</url>
    <content><![CDATA[<h1><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h1><p>由于Influxdb 1.X的客户端已经基本处于维护状态，同时openGemini仍在不断发展中，为了能够更好地支持openGemini，如支持对接多个服务端地址、支持对接Apache Arrow Flight协议等，社区决定开发属于openGemini自己的客户端SDK。</p>
<h1><span id="ke-hu-duan-sdk-gui-hua-gong-neng">客户端SDK规划功能</span><a href="#ke-hu-duan-sdk-gui-hua-gong-neng" class="header-anchor">#</a></h1><ul>
<li>支持对接多个服务端地址</li>
<li>支持对接Apache Arrow Flight协议</li>
<li>支持Sql查询、结构化查询、写入、批量写入等，详见下文UML图</li>
<li>默认超时，连接超时10秒，读写超时30秒</li>
</ul>
<p>本文的方法假定编程语言不支持重载，如编程语言支持重载，可以对方法名进行一些优化调整。</p>
<h1><span id="client-constructor-params-design">Client constructor params design</span><a href="#client-constructor-params-design" class="header-anchor">#</a></h1><p>tls相关配置可以参考<a href="../../code/multi-lang-paradigm-tls-config-design">TLS配置参数设计</a></p>
<pre class="mermaid">classDiagram
    class OpenGeminiClient {
        + List~Address~ addresses
        + AuthConfig authConfig // nullable, if null, means no auth
        + BatchConfig batchConfig // nullable, if null, means batch is disabled
        + timeout
        + connectTimeout
        + bool gzipEnabled
        + bool tlsEnabled
        + TlsConfig tlsConfig // language specific
        + void close()
    }
    
    class Address {
        + String host
        + int Port // in rust, it is u16
    }
    
    class AuthConfig {
        + AuthType authType // enum None, Password,Token
        + String username
        + String password
        + String token
    }
    
    class BatchConfig {
        + int batchInterval // must be greater than 0
        + int batchSize // must be greater than 0
    }

    OpenGeminiClient "1" *-- "many" Address : contains
    OpenGeminiClient *-- AuthConfig : contains
    OpenGeminiClient *-- BatchConfig : contains</pre>

<h1><span id="database-amp-retentionpolicy-management-design">Database &amp; RetentionPolicy management design</span><a href="#database-amp-retentionpolicy-management-design" class="header-anchor">#</a></h1><pre class="mermaid">classDiagram
    class RpConfig {
        + String Name
        + String Duration
        + String ShardGroupDuration
        + String IndexDuration
    }</pre>

<h1><span id="write-point-design">Write point design</span><a href="#write-point-design" class="header-anchor">#</a></h1><pre class="mermaid">classDiagram
    class OpenGeminiClient {
        + WritePoint(String database, Point point)
        + WriteBatchPoints(String database, BatchPoints batchPoints)
    }
    class BatchPoints {
        + List~Point~ points
        + AddPoint(Point)
    }
    
    class Point {
        + String measurement
        + Precision precision // enum, second, millisecond, microsecond, nanosecond, default is nanosecond
        + Time time // language specific
        + Map~String, String~ tags
        + Map~String, Object~ fields
        + AddTag(string, string) // init container if null
        + AddField(string, int) // init container if null
        + AddField(string, string) // init container if null
        + AddField(string, float) // init container if null
        + AddField(string, bool) // init container if null
        + SetTime(timestamp)
        + SetPrecision(type)
        + SetMeasurement(name)
    }

    BatchPoints "1" *-- "many" Point : contains</pre>

<h1><span id="sql-like-query-design">Sql-like query design</span><a href="#sql-like-query-design" class="header-anchor">#</a></h1><pre class="mermaid">classDiagram
    class Query {
        + String database
        + String retentionPolicy
        + String command
    }</pre>

<pre class="mermaid">classDiagram
    class QueryResult {
        + List~SeriesResult~ results
        + String error
    }
    class SeriesResult {
        + List~Series~ series // Series is an uncountable noun.
        + String error
    }
    class Series {
        + String name
        + Map~String, String~ tags
        + List~String~ columns
        + List~List~ values
    }
    QueryResult "1" *-- "0..*" SeriesResult : contains
    SeriesResult "1" *-- "0..*" Series : contains</pre>

<h1><span id="ping-design">Ping design</span><a href="#ping-design" class="header-anchor">#</a></h1><pre class="mermaid">classDiagram
    class OpenGeminiClient {
        + void ping(int index) // index selects one from multiple servers
    }</pre>

<h1><span id="inner-http-client-design">Inner Http client design</span><a href="#inner-http-client-design" class="header-anchor">#</a></h1><p>使用类似InnerHttpClient的设计，将鉴权、负载均衡、重试等逻辑封装在内部，对client提供简单的接口。增强模块化和代码清晰度。</p>
<pre class="mermaid">classDiagram
    class InnerHttpClient {
        + void executeHttpGetByIdx(int idx,...) // specify server index
        + void executeHttpRequestByIdx(int idx, String method,...) // specify server index
        + void executeHttpGet(String method,...) // load balance
        + void executeHttpRequest(String method,...) // load balance
        - void executeHttpRequestInner(String url, String method,...) // inner method
    }</pre>

<pre class="mermaid">graph TD
    executeHttpGetByIdx --> executeHttpRequestByIdx
    executeHttpRequestByIdx --> executeHttpRequestInner
    executeHttpGet --> executeHttpRequest
    executeHttpRequest --> executeHttpRequestInner</pre>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>opengemini</tag>
      </tags>
  </entry>
  <entry>
    <title>Pulsar消息积压topic级别策略老化的两种方案</title>
    <url>/pulsar/pulsar-msg-topic-level-policy-aging/</url>
    <content><![CDATA[<p><code>Pulsar</code>像大多数消息中间件一样,支持按时间和大小对消息积压进行老化。但是默认的策略只能在namespace级别配置。本文将介绍如何在topic级别实现老化策略的两种方案。</p>
<h2><span id="fang-an-yi-kai-qi-topiclevelpolicy-lai-shi-xian">方案一：开启 TopicLevelPolicy 来实现</span><a href="#fang-an-yi-kai-qi-topiclevelpolicy-lai-shi-xian" class="header-anchor">#</a></h2><p>默认的策略配置通过在<code>Zookeeper</code>上配置对应的策略，可以通过<code>./pulsar zookeeper-shell</code>命令来登录zookeeper集群查询。但是如果将这一实现方式扩展到topic级别，将会产生大量的（百万、千万级别）的ZooKeeper节点，这对于<code>ZooKeeper</code>集群来说几乎是不可接受的。因此，Pulsar提供了一种新的实现方式，即通过<code>Topic</code>来存储策略配置，而不是通过<code>ZooKeeper</code>来存储。</p>
<p><code>Pulsar</code>，从2.7.0版本开始，引入了<code>SystemTopic</code>，用于存储<code>Topic</code>的元数据信息，包括<code>Topic</code>的策略配置。主题级策略使用户可以更灵活地管理主题,并不会给 ZooKeeper 带来额外负担。</p>
<p>您可以通过如下配置来开启<code>TopicLevelPolicy</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemTopicEnabled=true</span><br><span class="line">topicLevelPoliciesEnabled=true</span><br></pre></td></tr></table></figure>

<p>然后通过<code>set-backlog-quota</code>命令来设置您想要的老化时间和老化大小</p>
<p>PS: 完整的一些功能，如命令行<code>set-backlog-quota</code>，在3.0.0版本中支持</p>
<h2><span id="fang-an-er-tong-guo-zi-ding-yi-dai-ma-lai-shi-xian">方案二：通过自定义代码来实现</span><a href="#fang-an-er-tong-guo-zi-ding-yi-dai-ma-lai-shi-xian" class="header-anchor">#</a></h2><p><code>Pulsar</code>的<code>TopicLevelPolicy</code>实现需要通过topic存储策略配置，而不是通过<code>ZooKeeper</code>来存储。在实际的极端场景下，<code>Topic</code>中存储的内容可能会丢失（因为未开启<code>Bookkeeper</code>立即落盘或磁盘文件损坏等原因），这将导致策略配置丢失，从而导致策略失效。因此，我们可以通过自定义代码来实现topic级别的策略配置，这样可以避免策略配置丢失的问题。</p>
<p>举个例子，业务可以将策略存放在<code>Mysql</code>中，然后通过<code>Pulsar</code>的<code>Admin API</code>来让策略生效</p>
<h3><span id="zi-ding-yi-dai-ma-shi-xian-backlog-shi-jian-ce-lue">自定义代码实现Backlog时间策略</span><a href="#zi-ding-yi-dai-ma-shi-xian-backlog-shi-jian-ce-lue" class="header-anchor">#</a></h3><pre class="mermaid">sequenceDiagram
    participant C as Client
    participant B as Broker
    loop
        C ->> B: expire-messages-all-subscriptions Request
        B -->> C: expire-messages-all-subscriptions Response
    end</pre>

<h3><span id="zi-ding-yi-dai-ma-shi-xian-backlog-da-xiao-ce-lue">自定义代码实现Backlog大小策略</span><a href="#zi-ding-yi-dai-ma-shi-xian-backlog-da-xiao-ce-lue" class="header-anchor">#</a></h3><pre class="mermaid">sequenceDiagram
    participant C as Client
    participant B as Broker
    loop
        C ->> B: stats-internal Request
        B -->> C: stats-internal Response
        alt messageBacklogSize < maxMessageBacklogSize
        else messageBacklogSize >= maxMessageBacklogSize
            Note over B,C: estimate the backlog position
            C ->> B: get-message-by-id Request
            B -->> C: get-message-by-id
            Note over B,C: get the timestamp of the message
            C ->> B: expire-messages-all-subscriptions Request
            B -->> C: expire-messages-all-subscriptions Response
        end
    end</pre>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Pulsar</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Http SDK设计</title>
    <url>/code/go/go-http-sdk-design/</url>
    <content><![CDATA[<p>根据Go项目的需求和特性，可以为Go的Http SDK项目选择以下命名方式：</p>
<ul>
<li><code>xxx-client-go</code>：如果这个项目只有Http SDK，没有其他协议的SDK，推荐使用这个命名方式。</li>
<li><code>xxx-http-client-go</code>：当存在其他协议的SDK时，可以使用这个命名方式，以区分不同协议的SDK。</li>
<li><code>xxx-admin-go</code>：当项目使用其他协议作为数据通道，使用HTTP协议作为管理通道时，可以使用这个命名方式。</li>
</ul>
<p>由于Go语言的调用方式是<code>包名.结构体名.方法名</code>，所以在设计SDK时，需要考虑包名、结构体名、方法名的设计。</p>
<p>以xxx业务为例，假设业务名为<code>xxx</code>，推荐包名也为<code>xxx</code>，结构体名为<code>Client</code>。</p>
<p>目录布局可以是这样子的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx-client-go/</span><br><span class="line">|-- xxx/</span><br><span class="line">|   |-- client.go</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 项目结构组织</title>
    <url>/code/go/go-project-structure/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#web-hou-duan-xiang-mu-jie-gou-zu-zhi">Web后端项目结构组织</a><ul>
<li><a href="#fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-wen-jian-ming-qu-fen-bu-fen-zi-bao">方案一：多业务模块通过文件名区分，不分子包</a></li>
<li><a href="#fang-an-er-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-dan-bu-chai-fen-model-he-service">方案二：多业务模块通过包名区分，但不拆分model和service</a></li>
<li><a href="#fang-an-san-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-bing-zai-xia-ceng-chai-fen-model-he-service">方案三：多业务模块通过包名区分，并在下层拆分model和service</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h2><span id="web-hou-duan-xiang-mu-jie-gou-zu-zhi">Web后端项目结构组织</span><a href="#web-hou-duan-xiang-mu-jie-gou-zu-zhi" class="header-anchor">#</a></h2><p>要点：</p>
<ul>
<li>使用<code>model</code>、<code>service</code>，而不是<code>modles</code>、<code>services</code>。差别不大，节约一个字母，更加简洁。</li>
<li>如果是企业内部的微服务，基本不会、极少把部分的功能以library的形式开放出去，internal目录在这个时候就略显鸡肋，可以省略。</li>
</ul>
<p>备注:</p>
<ul>
<li>xxx、yyy代表大块的业务区分：如用户、订单、支付</li>
<li>aaa、bbb代表小块的业务区分：如(用户的)登录、注册、查询</li>
</ul>
<h3><span id="fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-wen-jian-ming-qu-fen-bu-fen-zi-bao">方案一：多业务模块通过文件名区分，不分子包</span><a href="#fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-wen-jian-ming-qu-fen-bu-fen-zi-bao" class="header-anchor">#</a></h3><p>适用于小型项目</p>
<p>注：handler、model、service要留意方法、结构体、接口的命名，避免冲突</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example/</span><br><span class="line">|-- cmd/</span><br><span class="line">|   |-- example-server/</span><br><span class="line">|       |-- example-server.go (start gin app, manage handler, middleware)</span><br><span class="line">|-- pkg/</span><br><span class="line">|   |-- handler/</span><br><span class="line">|       |-- aaa_handler.go</span><br><span class="line">|       |-- bbb_handler.go</span><br><span class="line">|   |-- middleware/</span><br><span class="line">|       |-- aaa_middleware.go</span><br><span class="line">|       |-- bbb_middleware.go</span><br><span class="line">|   |-- model/</span><br><span class="line">|       |-- aaa_model.go</span><br><span class="line">|       |-- bbb_model.go</span><br><span class="line">|   |-- service/</span><br><span class="line">|       |-- aaa_service.go</span><br><span class="line">|       |-- bbb_service.go</span><br><span class="line">|   |-- ignite/</span><br><span class="line">|       |-- ignite.go</span><br><span class="line">|       |-- ignite_test.go</span><br><span class="line">|   |-- influx/</span><br><span class="line">|       |-- influx.go</span><br><span class="line">|       |-- influx_test.go</span><br><span class="line">|-- docker-build/</span><br><span class="line">|   |-- scripts/</span><br><span class="line">|       |-- start.sh</span><br><span class="line">|-- Dockerfile</span><br></pre></td></tr></table></figure>

<h3><span id="fang-an-er-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-dan-bu-chai-fen-model-he-service">方案二：多业务模块通过包名区分，但不拆分model和service</span><a href="#fang-an-er-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-dan-bu-chai-fen-model-he-service" class="header-anchor">#</a></h3><p>方案二更适用于由多个小模块组合而成的项目，每个小模块不会太大，复用度较高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example/</span><br><span class="line">|-- cmd/</span><br><span class="line">|   |-- example-server/</span><br><span class="line">|       |-- example-server.go (start gin app, manage handler, middleware)</span><br><span class="line">|-- pkg/</span><br><span class="line">|   |-- handler/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_handler.go</span><br><span class="line">|           |-- xxx_bbb_handler.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_aaa_handler.go</span><br><span class="line">|           |-- yyy_bbb_handler.go</span><br><span class="line">|   |-- middleware/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_middleware.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_bbb_middleware.go</span><br><span class="line">|   |-- xxx/</span><br><span class="line">|       |-- xxx_aaa_model.go</span><br><span class="line">|       |-- xxx_aaa_service.go</span><br><span class="line">|   |-- yyy/</span><br><span class="line">|       |-- yyy_bbb_model.go</span><br><span class="line">|       |-- yyy_bbb_service.go</span><br><span class="line">|   |-- ignite/</span><br><span class="line">|       |-- ignite.go</span><br><span class="line">|       |-- ignite_test.go</span><br><span class="line">|   |-- influx/</span><br><span class="line">|       |-- influx.go</span><br><span class="line">|       |-- influx_test.go</span><br><span class="line">|-- docker-build/</span><br><span class="line">|   |-- scripts/</span><br><span class="line">|       |-- start.sh</span><br><span class="line">|-- Dockerfile</span><br></pre></td></tr></table></figure>

<h3><span id="fang-an-san-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-bing-zai-xia-ceng-chai-fen-model-he-service">方案三：多业务模块通过包名区分，并在下层拆分model和service</span><a href="#fang-an-san-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-bing-zai-xia-ceng-chai-fen-model-he-service" class="header-anchor">#</a></h3><p>方案三更适用于由多个大模块组合而成的项目，每个大模块都很大，复用度较低，较少的互相调用。</p>
<p>方案三在service依赖多个service的情况下，会发生命名冲突。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example/</span><br><span class="line">|-- cmd/</span><br><span class="line">|   |-- example-server/</span><br><span class="line">|       |-- example-server.go (start gin app, manage handler, middleware)</span><br><span class="line">|-- pkg/</span><br><span class="line">|   |-- handler/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_handler.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_bbb_handler.go</span><br><span class="line">|   |-- middleware/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_middleware.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_bbb_middleware.go</span><br><span class="line">|   |-- xxx/</span><br><span class="line">|       |-- model/</span><br><span class="line">|           |-- xxx_aaa_model.go</span><br><span class="line">|       |-- service/</span><br><span class="line">|           |-- xxx_aaa_service.go</span><br><span class="line">|   |-- yyy/</span><br><span class="line">|       |-- model/</span><br><span class="line">|           |-- yyy_bbb_model.go</span><br><span class="line">|       |-- service/</span><br><span class="line">|           |-- yyy_bbb_service.go</span><br><span class="line">|   |-- ignite/</span><br><span class="line">|       |-- ignite.go</span><br><span class="line">|       |-- ignite_test.go</span><br><span class="line">|   |-- influx/</span><br><span class="line">|       |-- influx.go</span><br><span class="line">|       |-- influx_test.go</span><br><span class="line">|-- docker-build/</span><br><span class="line">|   |-- scripts/</span><br><span class="line">|       |-- start.sh</span><br><span class="line">|-- Dockerfile</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Http SDK设计</title>
    <url>/code/java/java-http-sdk-design/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#java-http-sdk-she-ji">Java Http SDK设计</a><ul>
<li><a href="#maven-mo-kuai-she-ji">maven模块设计</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="java-http-sdk-she-ji">Java Http SDK设计</span><a href="#java-http-sdk-she-ji" class="header-anchor">#</a></h1><p>根据Java项目的需求和特性，可以为Java的Http SDK项目选择以下命名方式：</p>
<ul>
<li><code>xxx-client-java</code>：如果这个项目只有Http SDK，没有其他协议的SDK，推荐使用这个命名方式。</li>
<li><code>xxx-http-client-java</code>：当存在其他协议的SDK时，可以使用这个命名方式，以区分不同协议的SDK。</li>
<li><code>xxx-admin-java</code>：当项目使用其他协议作为数据通道，使用HTTP协议作为管理通道时，可以使用这个命名方式。</li>
</ul>
<h2><span id="maven-mo-kuai-she-ji">maven模块设计</span><a href="#maven-mo-kuai-she-ji" class="header-anchor">#</a></h2><p>maven module命名可以叫xxx-client或者xxx-http-client，这通常取决于你的项目是否有其他协议的client，如果没有，那么推荐直接使用xxx-client。</p>
<p>假设包名前缀为com.xxx，module视图如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx-client-java(maven artifactId: xxx-client-parent)/</span><br><span class="line">|-- xxx-client-api(接口定义，包名com.xxx.client.api，jdk8+)</span><br><span class="line">|-- xxx-client-common/core(核心实现，包名com.xxx.client.common，jdk8+)</span><br><span class="line">|-- xxx-client-jdk(基于jdk http client的实现，包名com.xxx.client.jdk，jdk17+)</span><br><span class="line">|-- xxx-client-okhttp(基于okhttp的实现，包名com.xxx.client.okhttp，jdk8+)</span><br><span class="line">|-- xxx-client-reactor(基于reactor-netty的实现，包名com.xxx.client.reactor，jdk8+)</span><br></pre></td></tr></table></figure>

<p>依赖关系图:</p>
<pre class="mermaid">graph TD
api[xxx-client-api]
common[xxx-client-common]
jdk[xxx-client-jdk]
okhttp[xxx-client-okhttp]
reactor[xxx-client-reactor]

common --> api

jdk --> common
okhttp --> common
reactor --> common</pre>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 项目结构组织</title>
    <url>/code/java/java-project-structure/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#jian-dan-de-library">简单的library</a></li>
<li><a href="#fu-za-de-springboot-xiang-mu-fu-ze-duo-ge-ye-wu-mo-kuai">复杂的SpringBoot项目，负责多个业务模块</a><ul>
<li><a href="#fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-zi-bao-lai-qu-fen-bu-fen-zi-module">方案一：多业务模块通过子包来区分，不分子module</a></li>
<li><a href="#fang-an-er-gen-ju-ye-wu-mo-kuai-chai-fen-zi-module">方案二：根据业务模块拆分子module</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h2><span id="jian-dan-de-library">简单的library</span><a href="#jian-dan-de-library" class="header-anchor">#</a></h2><p>对于简单的library来说，我更推荐将所有的文件都放在同一个package下面，如简单的client封装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package:com.xxx.yyy/</span><br><span class="line">|-- XxClient</span><br><span class="line">|-- XxDTO</span><br><span class="line">|-- XxException</span><br><span class="line">|-- XxUtil</span><br></pre></td></tr></table></figure>

<h2><span id="fu-za-de-springboot-xiang-mu-fu-ze-duo-ge-ye-wu-mo-kuai">复杂的SpringBoot项目，负责多个业务模块</span><a href="#fu-za-de-springboot-xiang-mu-fu-ze-duo-ge-ye-wu-mo-kuai" class="header-anchor">#</a></h2><p>备注:</p>
<ul>
<li>xxx、yyy代表大块的业务区分：如用户、订单、支付</li>
<li>aaa、bbb代表小块的业务区分：如(用户的)登录、注册、查询</li>
</ul>
<h3><span id="fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-zi-bao-lai-qu-fen-bu-fen-zi-module">方案一：多业务模块通过子包来区分，不分子module</span><a href="#fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-zi-bao-lai-qu-fen-bu-fen-zi-module" class="header-anchor">#</a></h3><p>module视图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example(maven artifactId: example-parent)/</span><br><span class="line">|-- example-service(业务逻辑)</span><br><span class="line">|-- example-spring-ignite(依赖spring，常见为中间件client，适配spring模块用于方便单元测试)</span><br><span class="line">|-- example-spring-ignite-test(依赖spring，不依赖test-common，spring模块单元测试用)</span><br><span class="line">|-- example-starter(启动类)</span><br><span class="line">|-- example-test-common(不依赖example-common)</span><br><span class="line">|-- example-util(不依赖Spring框架，可选模块，为service与其他spring集成组件共用)</span><br></pre></td></tr></table></figure>

<p>依赖关系图:</p>
<pre class="mermaid">graph TD
service[example-service]
springIgnite[example-spring-ignite]
springIgniteTest[example-spring-ignite-test]
starter[example-starter]
testCommon[example-test-common]
util[example-util]

starter --> service

service --> springIgnite
service --> util
service -.-> testCommon

testCommon --> springIgniteTest

springIgniteTest --> springIgnite

springIgnite --> util</pre>

<p>service包内视图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.shoothzj.example/</span><br><span class="line">|-- service/</span><br><span class="line">|   |-- common/</span><br><span class="line">|   |-- module/</span><br><span class="line">|   |   |-- aaaModule</span><br><span class="line">|   |   |-- bbbModule</span><br><span class="line">|   |-- mapper/</span><br><span class="line">|   |   |-- aaaMapper</span><br><span class="line">|   |   |-- bbbMapper</span><br><span class="line">|   |-- repo/</span><br><span class="line">|   |   |-- aaaRepo</span><br><span class="line">|   |   |-- bbbRepo</span><br><span class="line">|   |-- service/</span><br><span class="line">|   |   |-- aaaService</span><br><span class="line">|   |   |-- bbbService</span><br></pre></td></tr></table></figure>

<h3><span id="fang-an-er-gen-ju-ye-wu-mo-kuai-chai-fen-zi-module">方案二：根据业务模块拆分子module</span><a href="#fang-an-er-gen-ju-ye-wu-mo-kuai-chai-fen-zi-module" class="header-anchor">#</a></h3><p>适用于大型项目，每个业务模块都比较大。</p>
<p>module视图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example(maven artifactId: example-parent)/</span><br><span class="line">|-- example-common(可依赖spring模块)</span><br><span class="line">|-- example-rest-xxx(xxx功能模块的rest接口)</span><br><span class="line">|-- example-rest-yyy(yyy功能模块的rest接口)</span><br><span class="line">|-- example-service-xxx(xxx功能的业务逻辑)</span><br><span class="line">|-- example-service-yyy(yyy功能的业务逻辑)</span><br><span class="line">|-- example-spring-ignite(依赖spring，常见为中间件client，适配spring模块用于方便单元测试)</span><br><span class="line">|-- example-spring-ignite-test(依赖spring，不依赖test-common，spring模块单元测试用)</span><br><span class="line">|-- example-starter(启动类)</span><br><span class="line">|-- example-test-common(不依赖example-common)</span><br><span class="line">|-- example-util(不依赖example-common，可选模块，为service、common与其他spring集成组件共用)</span><br></pre></td></tr></table></figure>

<p>依赖关系图:</p>
<pre class="mermaid">graph TD
common[example-common]
rest-xxx[example-rest-xxx]
rest-yyy[example-rest-yyy]
service-xxx[example-service-xxx]
service-yyy[example-service-yyy]
springIgnite[example-spring-ignite]
springIgniteTest[example-spring-ignite-test]
starter[example-starter]
testCommon[example-test-common]
util[example-util]

starter --> rest-xxx
starter --> rest-yyy

rest-xxx --> common
rest-xxx --> service-xxx

rest-yyy --> common
rest-yyy --> service-yyy

service-xxx --> common
service-xxx --> springIgnite

service-yyy --> common
service-yyy --> util

common -.-> testCommon

testCommon --> springIgniteTest

springIgniteTest --> springIgnite

springIgnite --> util</pre>

<p>关于service模块引不引用rest模块的DTO，我的想法：</p>
<p>如果确实service模块和rest模块DTO差距比较大，可以拆分做转换，如果差距很小&#x2F;没有差距，可以复用同一个DTO，放在service模块或者更底层的依赖。</p>
<p>service-xxx包内视图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.shoothzj.example.service/</span><br><span class="line">|-- xxx/</span><br><span class="line">|   |-- common/</span><br><span class="line">|   |-- module/</span><br><span class="line">|   |   |-- aaaModule</span><br><span class="line">|   |   |-- bbbModule</span><br><span class="line">|   |-- mapper/</span><br><span class="line">|   |   |-- aaaMapper</span><br><span class="line">|   |   |-- bbbMapper</span><br><span class="line">|   |-- repo/</span><br><span class="line">|   |   |-- aaaRepo</span><br><span class="line">|   |   |-- bbbRepo</span><br><span class="line">|   |-- service/</span><br><span class="line">|   |   |-- aaaService</span><br><span class="line">|   |   |-- bbbService</span><br></pre></td></tr></table></figure>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Http SDK设计</title>
    <url>/code/python/python-http-sdk-design/</url>
    <content><![CDATA[<p>根据Python项目的需求和特性，可以为Python的Http SDK项目选择以下命名方式：</p>
<ul>
<li><code>xxx-client-python</code>：如果这个项目只有Http SDK，没有其他协议的SDK，推荐使用这个命名方式。</li>
<li><code>xxx-http-client-python</code>：当存在其他协议的SDK时，可以使用这个命名方式，以区分不同协议的SDK。</li>
<li><code>xxx-admin-python</code>：当项目使用其他协议作为数据通道，使用HTTP协议作为管理通道时，可以使用这个命名方式。</li>
</ul>
<p>由于Python的调用方式通常是<code>模块名.类名.方法名</code>。</p>
]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Http SDK设计</title>
    <url>/code/typescript/typescript-http-sdk-design/</url>
    <content><![CDATA[<p>TypeScript的调用方式通常是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ClassName</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;moduleName&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> object = <span class="keyword">new</span> <span class="title class_">ClassName</span>();</span><br></pre></td></tr></table></figure>

<p>根据TypeScript项目的需求和特性，可以为TypeScript的Http SDK项目选择以下命名方式：</p>
<ul>
<li><code>xxx-client-ts</code>：如果这个项目只有Http SDK，没有其他协议的SDK，推荐使用这个命名方式。在npm可以注册为”xxx”。</li>
<li><code>xxx-http-client-ts</code>：当存在其他协议的SDK时，可以使用这个命名方式，以区分不同协议的SDK。</li>
<li><code>xxx-admin-ts</code>：当项目使用其他协议作为数据通道，使用HTTP协议作为管理通道时，可以使用这个命名方式。</li>
</ul>
]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ignite Java客户端最佳实践</title>
    <url>/code/java/ignite/ignite-java-client-best-practice/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#ignite-java-ke-hu-duan-zui-jia-shi-jian">Ignite Java 客户端最佳实践</a><ul>
<li><a href="#bei-jing">背景</a></li>
<li><a href="#ke-hu-duan-xiang-guan">客户端相关</a><ul>
<li><a href="#clientconfiguration-timeout">ClientConfiguration timeout</a></li>
</ul>
</li>
<li><a href="#sql-xiang-guan">SQL相关</a><ul>
<li><a href="#sqlfieldsquery-timeout">SqlFieldsQuery timeout</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="ignite-java-ke-hu-duan-zui-jia-shi-jian">Ignite Java 客户端最佳实践</span><a href="#ignite-java-ke-hu-duan-zui-jia-shi-jian" class="header-anchor">#</a></h1><h2><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h2><p>本文总结了在使用Apache Ignite（Ignite2.0）的Java客户端时，需要注意的一些问题，以及一些最佳实践。值得一提的是 Ignite的Java客户端有一些跟直觉上不太一样的地方，需要注意下。</p>
<h2><span id="ke-hu-duan-xiang-guan">客户端相关</span><a href="#ke-hu-duan-xiang-guan" class="header-anchor">#</a></h2><p>Ignite客户端有两处跟直觉上相差较大：</p>
<ul>
<li>Ignite客户端连接没有默认超时时间，如果连接不上，有概率会导致创建客户端一直阻塞，所以一定要设置timeout参数</li>
<li>Ignite客户端默认不会重连，更不用说无限重连了。并且Ignite客户端重连的实现方式是预先计算出所有重连的时间戳，然后在这些时间戳到达时重连，由于要预先计算出重连的时间戳存入数组，这也就意味着不能无限重连。如果您的应用程序需要无限重连（在云原生环境下，这是非常常见的场景），那么您需要自己实现重连逻辑。</li>
</ul>
<p>ClientConfiguration里的重要参数</p>
<h3><span id="clientconfiguration-timeout">ClientConfiguration timeout</span><a href="#clientconfiguration-timeout" class="header-anchor">#</a></h3><p>控制连接超时的参数，单位是毫秒。必须设置！如果不设置，有概率会导致创建客户端一直阻塞。</p>
<h2><span id="sql-xiang-guan">SQL相关</span><a href="#sql-xiang-guan" class="header-anchor">#</a></h2><p>SQL查询典型用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlFieldsQuery</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlFieldsQuery</span>(<span class="string">&quot;SELECT 42&quot;</span>).setTimeout(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">FieldsQueryCursor&lt;List&lt;?&gt;&gt; cursor = igniteClient.query(query))</span><br><span class="line">List&lt;List&lt;?&gt;&gt; result = cursor.getAll();</span><br></pre></td></tr></table></figure>

<p>注意：Ignite query出来的cursor如果自己通过iterator遍历则必须要close，否则会导致内存泄漏。</p>
<p>Query相关参数</p>
<h3><span id="sqlfieldsquery-timeout">SqlFieldsQuery timeout</span><a href="#sqlfieldsquery-timeout" class="header-anchor">#</a></h3><p>SqlQuery的超时时间，必须设置。默认是0，表示永不超时。如果不设置，有概率会导致查询一直阻塞。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Ignite</tag>
      </tags>
  </entry>
</search>
